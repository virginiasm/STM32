
FDCAN_Normal_Mode2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080039c0  080039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a10  08003a10  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a10  08003a10  00004a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a18  08003a18  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a18  08003a18  00004a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a1c  08003a1c  00004a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08003a2c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003a2c  0000517c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e770  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d93  00000000  00000000  000137ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00015540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e0  00000000  00000000  000160d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1ea  00000000  00000000  000169b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d83f  00000000  00000000  00034b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1edf  00000000  00000000  000423d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001042b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003000  00000000  00000000  001042fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001072fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080039a8 	.word	0x080039a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080039a8 	.word	0x080039a8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_FDCAN_RxFifo0Callback>:
uint8_t					TxData[12];
uint8_t					RxData[12];

int indx = 0;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d014      	beq.n	8000546 <HAL_FDCAN_RxFifo0Callback+0x3e>
		/* Retreive Rx messages from Rx FIFO0 */
		if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800051e:	4a0d      	ldr	r2, [pc, #52]	@ (8000554 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000520:	2140      	movs	r1, #64	@ 0x40
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 fe28 	bl	8001178 <HAL_FDCAN_GetRxMessage>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 800052e:	f000 f96d 	bl	800080c <Error_Handler>
		}
		if(HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK){
 8000532:	2200      	movs	r2, #0
 8000534:	2101      	movs	r1, #1
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 ff26 	bl	8001388 <HAL_FDCAN_ActivateNotification>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_FDCAN_RxFifo0Callback+0x3e>
			/* Notification Error */
			Error_Handler();
 8000542:	f000 f963 	bl	800080c <Error_Handler>
		}
	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000016c 	.word	0x2000016c
 8000554:	20000144 	.word	0x20000144

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 faaf 	bl	8000abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f83a 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f922 	bl	80007ac <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000568:	f000 f876 	bl	8000658 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 800056c:	f000 f8d4 	bl	8000718 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8000570:	4817      	ldr	r0, [pc, #92]	@ (80005d0 <main+0x78>)
 8000572:	f000 fdd9 	bl	8001128 <HAL_FDCAN_Start>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <main+0x28>
	  Error_Handler();
 800057c:	f000 f946 	bl	800080c <Error_Handler>
  }
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK){
 8000580:	2200      	movs	r2, #0
 8000582:	2101      	movs	r1, #1
 8000584:	4812      	ldr	r0, [pc, #72]	@ (80005d0 <main+0x78>)
 8000586:	f000 feff 	bl	8001388 <HAL_FDCAN_ActivateNotification>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <main+0x3c>
	  /*
	   * Notification Error
	   */
	  Error_Handler();
 8000590:	f000 f93c 	bl	800080c <Error_Handler>
  }
  TxHeader.Identifier = 0x22;
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <main+0x7c>)
 8000596:	2222      	movs	r2, #34	@ 0x22
 8000598:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <main+0x7c>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <main+0x7c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <main+0x7c>)
 80005a8:	2209      	movs	r2, #9
 80005aa:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <main+0x7c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <main+0x7c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <main+0x7c>)
 80005ba:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80005be:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80005c0:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <main+0x7c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80005c6:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <main+0x7c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x74>
 80005d0:	20000028 	.word	0x20000028
 80005d4:	20000120 	.word	0x20000120

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	2238      	movs	r2, #56	@ 0x38
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f9b2 	bl	8003950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005fe:	f001 fb1b 	bl	8001c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2340      	movs	r3, #64	@ 0x40
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fbc1 	bl	8001da0 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000624:	f000 f8f2 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2301      	movs	r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f001 febf 	bl	80023c4 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800064c:	f000 f8de 	bl	800080c <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 8000660:	4a2c      	ldr	r2, [pc, #176]	@ (8000714 <MX_FDCAN1_Init+0xbc>)
 8000662:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000664:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 800066c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000670:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000672:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000678:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 800067a:	2201      	movs	r2, #1
 800067c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800067e:	4b24      	ldr	r3, [pc, #144]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 8000680:	2201      	movs	r2, #1
 8000682:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 8000686:	2200      	movs	r2, #0
 8000688:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 800068c:	2204      	movs	r2, #4
 800068e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 8000692:	2210      	movs	r2, #16
 8000694:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 8000698:	223f      	movs	r2, #63	@ 0x3f
 800069a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 800069e:	2210      	movs	r2, #16
 80006a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006b0:	220e      	movs	r2, #14
 80006b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006b6:	2205      	movs	r2, #5
 80006b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006bc:	221c      	movs	r2, #28
 80006be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006cc:	4810      	ldr	r0, [pc, #64]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006ce:	f000 fb77 	bl	8000dc0 <HAL_FDCAN_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 80006d8:	f000 f898 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006e8:	2301      	movs	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 80006ec:	2311      	movs	r3, #17
 80006ee:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 80006f0:	2311      	movs	r3, #17
 80006f2:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_FDCAN1_Init+0xb8>)
 80006fa:	f000 fcbb 	bl	8001074 <HAL_FDCAN_ConfigFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_FDCAN1_Init+0xb0>
  	Error_Handler();
 8000704:	f000 f882 	bl	800080c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	40006400 	.word	0x40006400

08000718 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800071c:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800071e:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 8000724:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <MX_LPUART1_UART_Init+0x90>)
 8000726:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800073c:	220c      	movs	r2, #12
 800073e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000758:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800075a:	f002 fa8b 	bl	8002c74 <HAL_UART_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000764:	f000 f852 	bl	800080c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800076c:	f003 f826 	bl	80037bc <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000776:	f000 f849 	bl	800080c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800077e:	f003 f85b 	bl	8003838 <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000788:	f000 f840 	bl	800080c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_LPUART1_UART_Init+0x88>)
 800078e:	f002 ffdc 	bl	800374a <HAL_UARTEx_DisableFifoMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000798:	f000 f838 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40008000 	.word	0x40008000
 80007a8:	00033324 	.word	0x00033324

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_GPIO_Init+0x5c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_MspInit+0x44>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6613      	str	r3, [r2, #96]	@ 0x60
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x44>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6593      	str	r3, [r2, #88]	@ 0x58
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800084e:	f001 fa97 	bl	8001d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b09e      	sub	sp, #120	@ 0x78
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2250      	movs	r2, #80	@ 0x50
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f003 f865 	bl	8003950 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a24      	ldr	r2, [pc, #144]	@ (800091c <HAL_FDCAN_MspInit+0xbc>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d141      	bne.n	8000914 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000894:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000896:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 ffab 	bl	80027fc <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008ac:	f7ff ffae 	bl	800080c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <HAL_FDCAN_MspInit+0xc0>)
 80008b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <HAL_FDCAN_MspInit+0xc0>)
 80008b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <HAL_FDCAN_MspInit+0xc0>)
 80008be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_FDCAN_MspInit+0xc0>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008cc:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <HAL_FDCAN_MspInit+0xc0>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_FDCAN_MspInit+0xc0>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008f2:	2309      	movs	r3, #9
 80008f4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f001 f818 	bl	8001934 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2015      	movs	r0, #21
 800090a:	f000 fa24 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800090e:	2015      	movs	r0, #21
 8000910:	f000 fa3b 	bl	8000d8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000914:	bf00      	nop
 8000916:	3778      	adds	r7, #120	@ 0x78
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40006400 	.word	0x40006400
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09e      	sub	sp, #120	@ 0x78
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2250      	movs	r2, #80	@ 0x50
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 f803 	bl	8003950 <memset>
  if(huart->Instance==LPUART1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <HAL_UART_MspInit+0xa4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d135      	bne.n	80009c0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ff4b 	bl	80027fc <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ff4e 	bl	800080c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000970:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 8000972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000974:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800097c:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 800097e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000994:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009a0:	2303      	movs	r3, #3
 80009a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009b0:	2308      	movs	r3, #8
 80009b2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 80009bc:	f000 ffba 	bl	8001934 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009c0:	bf00      	nop
 80009c2:	3778      	adds	r7, #120	@ 0x78
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40008000 	.word	0x40008000
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000800 	.word	0x48000800

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 f89b 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <FDCAN1_IT0_IRQHandler+0x10>)
 8000a3a:	f000 fd8b 	bl	8001554 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000028 	.word	0x20000028

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	@ (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f002 ff61 	bl	8003960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fd5b 	bl	8000558 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	08003a20 	.word	0x08003a20
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	2000017c 	.word	0x2000017c

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>

08000abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f939 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f80e 	bl	8000af0 <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae0:	f7ff fe9a 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_InitTick+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d022      	beq.n	8000b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_InitTick+0x6c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <HAL_InitTick+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f944 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d809      	bhi.n	8000b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	f000 f910 	bl	8000d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_InitTick+0x70>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e004      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000178 	.word	0x20000178
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000178 	.word	0x20000178

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff40 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff90 	bl	8000c94 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5f 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff33 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa4 	bl	8000cfc <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e147      	b.n	8001062 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fd3a 	bl	8000860 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	699a      	ldr	r2, [r3, #24]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0210 	bic.w	r2, r2, #16
 8000dfa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfc:	f7ff fec4 	bl	8000b88 <HAL_GetTick>
 8000e00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e02:	e012      	b.n	8000e2a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e04:	f7ff fec0 	bl	8000b88 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b0a      	cmp	r3, #10
 8000e10:	d90b      	bls.n	8000e2a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2203      	movs	r2, #3
 8000e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e11b      	b.n	8001062 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d0e5      	beq.n	8000e04 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e48:	f7ff fe9e 	bl	8000b88 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e4e:	e012      	b.n	8000e76 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e50:	f7ff fe9a 	bl	8000b88 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90b      	bls.n	8000e76 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	f043 0201 	orr.w	r2, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0f5      	b.n	8001062 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0e5      	beq.n	8000e50 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0202 	orr.w	r2, r2, #2
 8000e92:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a74      	ldr	r2, [pc, #464]	@ (800106c <HAL_FDCAN_Init+0x2ac>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d103      	bne.n	8000ea6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e9e:	4a74      	ldr	r2, [pc, #464]	@ (8001070 <HAL_FDCAN_Init+0x2b0>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7c1b      	ldrb	r3, [r3, #16]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d108      	bne.n	8000ec0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ebc:	619a      	str	r2, [r3, #24]
 8000ebe:	e007      	b.n	8000ed0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ece:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7c5b      	ldrb	r3, [r3, #17]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ee6:	619a      	str	r2, [r3, #24]
 8000ee8:	e007      	b.n	8000efa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000ef8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7c9b      	ldrb	r3, [r3, #18]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f10:	619a      	str	r2, [r3, #24]
 8000f12:	e007      	b.n	8000f24 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f22:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000f48:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0210 	bic.w	r2, r2, #16
 8000f58:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d108      	bne.n	8000f74 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	699a      	ldr	r2, [r3, #24]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0204 	orr.w	r2, r2, #4
 8000f70:	619a      	str	r2, [r3, #24]
 8000f72:	e02c      	b.n	8000fce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d028      	beq.n	8000fce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d01c      	beq.n	8000fbe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	699a      	ldr	r2, [r3, #24]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f92:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0210 	orr.w	r2, r2, #16
 8000fa2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d110      	bne.n	8000fce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	699a      	ldr	r2, [r3, #24]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0220 	orr.w	r2, r2, #32
 8000fba:	619a      	str	r2, [r3, #24]
 8000fbc:	e007      	b.n	8000fce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0220 	orr.w	r2, r2, #32
 8000fcc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fde:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fe6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ff6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ff8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001002:	d115      	bne.n	8001030 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001008:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100e:	3b01      	subs	r3, #1
 8001010:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001012:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	3b01      	subs	r3, #1
 800101a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800101c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	3b01      	subs	r3, #1
 8001026:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800102c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800102e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fc12 	bl	8001870 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40006400 	.word	0x40006400
 8001070:	40006500 	.word	0x40006500

08001074 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001084:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d002      	beq.n	8001092 <HAL_FDCAN_ConfigFilter+0x1e>
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d13d      	bne.n	800110e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d119      	bne.n	80010ce <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010a6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80010ae:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e01d      	b.n	800110a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	075a      	lsls	r2, r3, #29
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	079a      	lsls	r2, r3, #30
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3304      	adds	r3, #4
 8001102:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e006      	b.n	800111c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	f043 0202 	orr.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d110      	bne.n	800115e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e006      	b.n	800116c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	f043 0204 	orr.w	r2, r3, #4
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
  }
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001178:	b480      	push	{r7}
 800117a:	b08b      	sub	sp, #44	@ 0x2c
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001190:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001192:	7efb      	ldrb	r3, [r7, #27]
 8001194:	2b02      	cmp	r3, #2
 8001196:	f040 80e8 	bne.w	800136a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b40      	cmp	r3, #64	@ 0x40
 800119e:	d137      	bne.n	8001210 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d107      	bne.n	80011c0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0db      	b.n	8001378 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011c8:	0e1b      	lsrs	r3, r3, #24
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10a      	bne.n	80011e8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011da:	0a5b      	lsrs	r3, r3, #9
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4413      	add	r3, r2
 80011fa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
 800120e:	e036      	b.n	800127e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001224:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0a3      	b.n	8001378 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001238:	0e1b      	lsrs	r3, r3, #24
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10a      	bne.n	8001258 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001254:	2301      	movs	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4413      	add	r3, r2
 800126a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d107      	bne.n	80012a2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0c9b      	lsrs	r3, r3, #18
 8001298:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e005      	b.n	80012ae <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	3304      	adds	r3, #4
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	f003 020f 	and.w	r2, r3, #15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0e1b      	lsrs	r3, r3, #24
 8001302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	0fda      	lsrs	r2, r3, #31
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	3304      	adds	r3, #4
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
 8001322:	e00a      	b.n	800133a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	441a      	add	r2, r3
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	440b      	add	r3, r1
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	3301      	adds	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	461a      	mov	r2, r3
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	4293      	cmp	r3, r2
 8001348:	d3ec      	bcc.n	8001324 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b40      	cmp	r3, #64	@ 0x40
 800134e:	d105      	bne.n	800135c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800135a:	e004      	b.n	8001366 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e006      	b.n	8001378 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136e:	f043 0208 	orr.w	r2, r3, #8
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
  }
}
 8001378:	4618      	mov	r0, r3
 800137a:	372c      	adds	r7, #44	@ 0x2c
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	080039d8 	.word	0x080039d8

08001388 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800139a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d003      	beq.n	80013aa <HAL_FDCAN_ActivateNotification+0x22>
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	f040 80c8 	bne.w	800153a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d03b      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d031      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d027      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d01d      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d013      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0320 	and.w	r3, r3, #32
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d13b      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d131      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	d127      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d11d      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d113      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0202 	orr.w	r2, r2, #2
 80014e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	430a      	orrs	r2, r1
 8001504:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	430a      	orrs	r2, r1
 8001522:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	430a      	orrs	r2, r1
 8001534:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e006      	b.n	8001548 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	f043 0202 	orr.w	r2, r3, #2
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
  }
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	@ 0x30
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001562:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001570:	4013      	ands	r3, r2
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001588:	4013      	ands	r3, r2
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a0:	4013      	ands	r3, r2
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015aa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80015ae:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	4013      	ands	r3, r2
 80015ba:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015c6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015da:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2240      	movs	r2, #64	@ 0x40
 80015fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f916 	bl	8001832 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d014      	beq.n	8001644 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001622:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800163a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f8d8 	bl	80017f4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001650:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f8a2 	bl	800179e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800165a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001666:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff4c 	bl	8000508 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800167e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f897 	bl	80017b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00c      	beq.n	80016aa <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f890 	bl	80017ca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d018      	beq.n	80016e6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d013      	beq.n	80016e6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016c6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2280      	movs	r2, #128	@ 0x80
 80016dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80016de:	68f9      	ldr	r1, [r7, #12]
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f87c 	bl	80017de <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00c      	beq.n	800170a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001702:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f880 	bl	800180a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001726:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f878 	bl	800181e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00f      	beq.n	8001758 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00a      	beq.n	8001758 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800174a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001750:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001766:	69f9      	ldr	r1, [r7, #28]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f876 	bl	800185a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d009      	beq.n	8001788 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6a3a      	ldr	r2, [r7, #32]
 800177a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f858 	bl	8001846 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	@ 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001878:	4b2c      	ldr	r3, [pc, #176]	@ (800192c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800187a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2b      	ldr	r2, [pc, #172]	@ (8001930 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d103      	bne.n	800188e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800188c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800189c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018c2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ca:	061a      	lsls	r2, r3, #24
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e005      	b.n	8001910 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3304      	adds	r3, #4
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3f3      	bcc.n	8001904 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	4000a400 	.word	0x4000a400
 8001930:	40006800 	.word	0x40006800

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001942:	e15a      	b.n	8001bfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 814c 	beq.w	8001bf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d005      	beq.n	8001974 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001970:	2b02      	cmp	r3, #2
 8001972:	d130      	bne.n	80019d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019aa:	2201      	movs	r2, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 0201 	and.w	r2, r3, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d017      	beq.n	8001a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d123      	bne.n	8001a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	6939      	ldr	r1, [r7, #16]
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0203 	and.w	r2, r3, #3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a6 	beq.w	8001bf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c18 <HAL_GPIO_Init+0x2e4>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	4a5a      	ldr	r2, [pc, #360]	@ (8001c18 <HAL_GPIO_Init+0x2e4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab4:	4b58      	ldr	r3, [pc, #352]	@ (8001c18 <HAL_GPIO_Init+0x2e4>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac0:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aea:	d01f      	beq.n	8001b2c <HAL_GPIO_Init+0x1f8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a4c      	ldr	r2, [pc, #304]	@ (8001c20 <HAL_GPIO_Init+0x2ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d019      	beq.n	8001b28 <HAL_GPIO_Init+0x1f4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a4b      	ldr	r2, [pc, #300]	@ (8001c24 <HAL_GPIO_Init+0x2f0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <HAL_GPIO_Init+0x1f0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a4a      	ldr	r2, [pc, #296]	@ (8001c28 <HAL_GPIO_Init+0x2f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1ec>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a49      	ldr	r2, [pc, #292]	@ (8001c2c <HAL_GPIO_Init+0x2f8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1e8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a48      	ldr	r2, [pc, #288]	@ (8001c30 <HAL_GPIO_Init+0x2fc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1e4>
 8001b14:	2305      	movs	r3, #5
 8001b16:	e00a      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b18:	2306      	movs	r3, #6
 8001b1a:	e008      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3e:	4937      	ldr	r1, [pc, #220]	@ (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4c:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b70:	4a30      	ldr	r2, [pc, #192]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b9a:	4a26      	ldr	r2, [pc, #152]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bee:	4a11      	ldr	r2, [pc, #68]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f ae9d 	bne.w	8001944 <HAL_GPIO_Init+0x10>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	48001000 	.word	0x48001000
 8001c30:	48001400 	.word	0x48001400
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d141      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c46:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c52:	d131      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c54:	4b47      	ldr	r3, [pc, #284]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c5a:	4a46      	ldr	r2, [pc, #280]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c64:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c6c:	4a41      	ldr	r2, [pc, #260]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c74:	4b40      	ldr	r3, [pc, #256]	@ (8001d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2232      	movs	r2, #50	@ 0x32
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c8a:	e002      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c92:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c9e:	d102      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f2      	bne.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca6:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cb2:	d158      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e057      	b.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cc8:	e04d      	b.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cd0:	d141      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cd2:	4b28      	ldr	r3, [pc, #160]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cde:	d131      	bne.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce0:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ce6:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf0:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2232      	movs	r2, #50	@ 0x32
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9b      	lsrs	r3, r3, #18
 8001d12:	3301      	adds	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d16:	e002      	b.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d2a:	d102      	bne.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f2      	bne.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3e:	d112      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e011      	b.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d54:	e007      	b.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40007000 	.word	0x40007000
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	431bde83 	.word	0x431bde83

08001d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8e:	6093      	str	r3, [r2, #8]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40007000 	.word	0x40007000

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e2fe      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d075      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbe:	4b97      	ldr	r3, [pc, #604]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	4b94      	ldr	r3, [pc, #592]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d102      	bne.n	8001dde <HAL_RCC_OscConfig+0x3e>
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_OscConfig+0x44>
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b8d      	ldr	r3, [pc, #564]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d157      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e2d9      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x74>
 8001e06:	4b85      	ldr	r3, [pc, #532]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a84      	ldr	r2, [pc, #528]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a7e      	ldr	r2, [pc, #504]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e38:	4b78      	ldr	r3, [pc, #480]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a77      	ldr	r2, [pc, #476]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b75      	ldr	r3, [pc, #468]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a74      	ldr	r2, [pc, #464]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe fe96 	bl	8000b88 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7fe fe92 	bl	8000b88 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	@ 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e29e      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e72:	4b6a      	ldr	r3, [pc, #424]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe fe82 	bl	8000b88 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7fe fe7e 	bl	8000b88 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e28a      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9a:	4b60      	ldr	r3, [pc, #384]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0xe8>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb6:	4b59      	ldr	r3, [pc, #356]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec0:	4b56      	ldr	r3, [pc, #344]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x136>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_OscConfig+0x13c>
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d11f      	bne.n	8001f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001edc:	4b4f      	ldr	r3, [pc, #316]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x154>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e25d      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b49      	ldr	r3, [pc, #292]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	4946      	ldr	r1, [pc, #280]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f08:	4b45      	ldr	r3, [pc, #276]	@ (8002020 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fdef 	bl	8000af0 <HAL_InitTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d043      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e249      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f24:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3c      	ldr	r2, [pc, #240]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7fe fe2a 	bl	8000b88 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7fe fe26 	bl	8000b88 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e232      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4a:	4b34      	ldr	r3, [pc, #208]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b31      	ldr	r3, [pc, #196]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	492d      	ldr	r1, [pc, #180]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
 8001f6a:	e01a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe fe06 	bl	8000b88 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe fe02 	bl	8000b88 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e20e      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f92:	4b22      	ldr	r3, [pc, #136]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1e0>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d041      	beq.n	8002032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fbc:	4a17      	ldr	r2, [pc, #92]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7fe fddf 	bl	8000b88 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fce:	f7fe fddb 	bl	8000b88 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1e7      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ef      	beq.n	8001fce <HAL_RCC_OscConfig+0x22e>
 8001fee:	e020      	b.n	8002032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ff6:	4a09      	ldr	r2, [pc, #36]	@ (800201c <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7fe fdc2 	bl	8000b88 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002006:	e00d      	b.n	8002024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7fe fdbe 	bl	8000b88 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d906      	bls.n	8002024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1ca      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002024:	4b8c      	ldr	r3, [pc, #560]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ea      	bne.n	8002008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80a6 	beq.w	800218c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002044:	4b84      	ldr	r3, [pc, #528]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_OscConfig+0x2b4>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x2b6>
 8002054:	2300      	movs	r3, #0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00d      	beq.n	8002076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b7f      	ldr	r3, [pc, #508]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	4a7e      	ldr	r2, [pc, #504]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	@ 0x58
 8002066:	4b7c      	ldr	r3, [pc, #496]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002076:	4b79      	ldr	r3, [pc, #484]	@ (800225c <HAL_RCC_OscConfig+0x4bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002082:	4b76      	ldr	r3, [pc, #472]	@ (800225c <HAL_RCC_OscConfig+0x4bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a75      	ldr	r2, [pc, #468]	@ (800225c <HAL_RCC_OscConfig+0x4bc>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7fe fd7b 	bl	8000b88 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7fe fd77 	bl	8000b88 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e183      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	4b6c      	ldr	r3, [pc, #432]	@ (800225c <HAL_RCC_OscConfig+0x4bc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_RCC_OscConfig+0x32e>
 80020bc:	4b66      	ldr	r3, [pc, #408]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	4a65      	ldr	r2, [pc, #404]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020cc:	e024      	b.n	8002118 <HAL_RCC_OscConfig+0x378>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d110      	bne.n	80020f8 <HAL_RCC_OscConfig+0x358>
 80020d6:	4b60      	ldr	r3, [pc, #384]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f6:	e00f      	b.n	8002118 <HAL_RCC_OscConfig+0x378>
 80020f8:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fe:	4a56      	ldr	r2, [pc, #344]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002108:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210e:	4a52      	ldr	r2, [pc, #328]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d016      	beq.n	800214e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7fe fd32 	bl	8000b88 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fd2e 	bl	8000b88 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e138      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213e:	4b46      	ldr	r3, [pc, #280]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ed      	beq.n	8002128 <HAL_RCC_OscConfig+0x388>
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7fe fd1b 	bl	8000b88 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7fe fd17 	bl	8000b88 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e121      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800216c:	4b3a      	ldr	r3, [pc, #232]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ed      	bne.n	8002156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b35      	ldr	r3, [pc, #212]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	4a34      	ldr	r2, [pc, #208]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d03c      	beq.n	8002212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01c      	beq.n	80021da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe fcea 	bl	8000b88 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b8:	f7fe fce6 	bl	8000b88 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0f2      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ca:	4b23      	ldr	r3, [pc, #140]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ef      	beq.n	80021b8 <HAL_RCC_OscConfig+0x418>
 80021d8:	e01b      	b.n	8002212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021da:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80021dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7fe fccd 	bl	8000b88 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f2:	f7fe fcc9 	bl	8000b88 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0d5      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ef      	bne.n	80021f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80c9 	beq.w	80023ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b0c      	cmp	r3, #12
 8002226:	f000 8083 	beq.w	8002330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d15e      	bne.n	80022f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <HAL_RCC_OscConfig+0x4b8>)
 8002238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fca3 	bl	8000b88 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002244:	e00c      	b.n	8002260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe fc9f 	bl	8000b88 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d905      	bls.n	8002260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0ab      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	4b55      	ldr	r3, [pc, #340]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ec      	bne.n	8002246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226c:	4b52      	ldr	r3, [pc, #328]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b52      	ldr	r3, [pc, #328]	@ (80023bc <HAL_RCC_OscConfig+0x61c>)
 8002272:	4013      	ands	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6a11      	ldr	r1, [r2, #32]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800227c:	3a01      	subs	r2, #1
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002286:	0212      	lsls	r2, r2, #8
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800228e:	0852      	lsrs	r2, r2, #1
 8002290:	3a01      	subs	r2, #1
 8002292:	0552      	lsls	r2, r2, #21
 8002294:	4311      	orrs	r1, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800229a:	0852      	lsrs	r2, r2, #1
 800229c:	3a01      	subs	r2, #1
 800229e:	0652      	lsls	r2, r2, #25
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022a6:	06d2      	lsls	r2, r2, #27
 80022a8:	430a      	orrs	r2, r1
 80022aa:	4943      	ldr	r1, [pc, #268]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b41      	ldr	r3, [pc, #260]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a40      	ldr	r2, [pc, #256]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022bc:	4b3e      	ldr	r3, [pc, #248]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a3d      	ldr	r2, [pc, #244]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fc5e 	bl	8000b88 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fc5a 	bl	8000b88 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e066      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e2:	4b35      	ldr	r3, [pc, #212]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x530>
 80022ee:	e05e      	b.n	80023ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a30      	ldr	r2, [pc, #192]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fc44 	bl	8000b88 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fc40 	bl	8000b88 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e04c      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002322:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	4924      	ldr	r1, [pc, #144]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 8002328:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <HAL_RCC_OscConfig+0x620>)
 800232a:	4013      	ands	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]
 800232e:	e03e      	b.n	80023ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e039      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800233c:	4b1e      	ldr	r3, [pc, #120]	@ (80023b8 <HAL_RCC_OscConfig+0x618>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	429a      	cmp	r2, r3
 800234e:	d12c      	bne.n	80023aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	3b01      	subs	r3, #1
 800235c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d123      	bne.n	80023aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d11b      	bne.n	80023aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d113      	bne.n	80023aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	3b01      	subs	r3, #1
 8002390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d109      	bne.n	80023aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	3b01      	subs	r3, #1
 80023a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	019f800c 	.word	0x019f800c
 80023c0:	feeefffc 	.word	0xfeeefffc

080023c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e11e      	b.n	800261a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b91      	ldr	r3, [pc, #580]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	498c      	ldr	r1, [pc, #560]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b8a      	ldr	r3, [pc, #552]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e106      	b.n	800261a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d073      	beq.n	8002500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d129      	bne.n	8002474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002420:	4b81      	ldr	r3, [pc, #516]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0f4      	b.n	800261a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002430:	f000 f99e 	bl	8002770 <RCC_GetSysClockFreqFromPLLSource>
 8002434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4a7c      	ldr	r2, [pc, #496]	@ (800262c <HAL_RCC_ClockConfig+0x268>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d93f      	bls.n	80024be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800243e:	4b7a      	ldr	r3, [pc, #488]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002452:	2b00      	cmp	r3, #0
 8002454:	d033      	beq.n	80024be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d12f      	bne.n	80024be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800245e:	4b72      	ldr	r3, [pc, #456]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002466:	4a70      	ldr	r2, [pc, #448]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800246c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e024      	b.n	80024be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247c:	4b6a      	ldr	r3, [pc, #424]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0c6      	b.n	800261a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	4b66      	ldr	r3, [pc, #408]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0be      	b.n	800261a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800249c:	f000 f8ce 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4a61      	ldr	r2, [pc, #388]	@ (800262c <HAL_RCC_ClockConfig+0x268>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d909      	bls.n	80024be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80024b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b5a      	ldr	r3, [pc, #360]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4957      	ldr	r1, [pc, #348]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fb5a 	bl	8000b88 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe fb56 	bl	8000b88 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e095      	b.n	800261a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d023      	beq.n	8002554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b43      	ldr	r3, [pc, #268]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a42      	ldr	r2, [pc, #264]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 800251e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002530:	4b3d      	ldr	r3, [pc, #244]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002538:	4a3b      	ldr	r2, [pc, #236]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 800253a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800253e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	4b39      	ldr	r3, [pc, #228]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4936      	ldr	r1, [pc, #216]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
 8002552:	e008      	b.n	8002566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b80      	cmp	r3, #128	@ 0x80
 8002558:	d105      	bne.n	8002566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800255a:	4b33      	ldr	r3, [pc, #204]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4a32      	ldr	r2, [pc, #200]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002566:	4b2f      	ldr	r3, [pc, #188]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d21d      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 020f 	bic.w	r2, r3, #15
 800257c:	4929      	ldr	r1, [pc, #164]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002584:	f7fe fb00 	bl	8000b88 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fafc 	bl	8000b88 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e03b      	b.n	800261a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b20      	ldr	r3, [pc, #128]	@ (8002624 <HAL_RCC_ClockConfig+0x260>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1ed      	bne.n	800258c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4917      	ldr	r1, [pc, #92]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025da:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	490f      	ldr	r1, [pc, #60]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ee:	f000 f825 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <HAL_RCC_ClockConfig+0x264>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490c      	ldr	r1, [pc, #48]	@ (8002630 <HAL_RCC_ClockConfig+0x26c>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x270>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800260e:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_RCC_ClockConfig+0x274>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fa6c 	bl	8000af0 <HAL_InitTick>
 8002618:	4603      	mov	r3, r0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000
 8002628:	40021000 	.word	0x40021000
 800262c:	04c4b400 	.word	0x04c4b400
 8002630:	080039c0 	.word	0x080039c0
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002642:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d102      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800264e:	4b2a      	ldr	r3, [pc, #168]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e047      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002654:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d102      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002660:	4b26      	ldr	r3, [pc, #152]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	e03e      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002666:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d136      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800267c:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	3301      	adds	r3, #1
 8002688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002690:	4a1a      	ldr	r2, [pc, #104]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	4a16      	ldr	r2, [pc, #88]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800269a:	68d2      	ldr	r2, [r2, #12]
 800269c:	0a12      	lsrs	r2, r2, #8
 800269e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
      break;
 80026a8:	e00c      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026aa:	4a13      	ldr	r2, [pc, #76]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	0a12      	lsrs	r2, r2, #8
 80026b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
      break;
 80026c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0e5b      	lsrs	r3, r3, #25
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	3301      	adds	r3, #1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e001      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026e4:	693b      	ldr	r3, [r7, #16]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	007a1200 	.word	0x007a1200

08002700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800271c:	f7ff fff0 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4904      	ldr	r1, [pc, #16]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	080039d0 	.word	0x080039d0

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002748:	f7ff ffda 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4904      	ldr	r1, [pc, #16]	@ (800276c <HAL_RCC_GetPCLK2Freq+0x28>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	080039d0 	.word	0x080039d0

08002770 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002776:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3301      	adds	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d10c      	bne.n	80027ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002794:	4a17      	ldr	r2, [pc, #92]	@ (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	4a14      	ldr	r2, [pc, #80]	@ (80027f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800279e:	68d2      	ldr	r2, [r2, #12]
 80027a0:	0a12      	lsrs	r2, r2, #8
 80027a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
    break;
 80027ac:	e00c      	b.n	80027c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ae:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4a0e      	ldr	r2, [pc, #56]	@ (80027f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0a12      	lsrs	r2, r2, #8
 80027bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    break;
 80027c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0e5b      	lsrs	r3, r3, #25
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027e2:	687b      	ldr	r3, [r7, #4]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40021000 	.word	0x40021000
 80027f4:	007a1200 	.word	0x007a1200
 80027f8:	00f42400 	.word	0x00f42400

080027fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002804:	2300      	movs	r3, #0
 8002806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002808:	2300      	movs	r3, #0
 800280a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8098 	beq.w	800294a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281a:	2300      	movs	r3, #0
 800281c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b43      	ldr	r3, [pc, #268]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10d      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b40      	ldr	r3, [pc, #256]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	4a3f      	ldr	r2, [pc, #252]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	@ 0x58
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002842:	2301      	movs	r3, #1
 8002844:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002846:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a39      	ldr	r2, [pc, #228]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002852:	f7fe f999 	bl	8000b88 <HAL_GetTick>
 8002856:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002858:	e009      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe f995 	bl	8000b88 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d902      	bls.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	74fb      	strb	r3, [r7, #19]
        break;
 800286c:	e005      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286e:	4b30      	ldr	r3, [pc, #192]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ef      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d159      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002880:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01e      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	d019      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800289c:	4b23      	ldr	r3, [pc, #140]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a8:	4b20      	ldr	r3, [pc, #128]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ae:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b8:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028be:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c8:	4a18      	ldr	r2, [pc, #96]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe f955 	bl	8000b88 <HAL_GetTick>
 80028de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	e00b      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe f951 	bl	8000b88 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d902      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	74fb      	strb	r3, [r7, #19]
            break;
 80028f8:	e006      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ec      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10b      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290e:	4b07      	ldr	r3, [pc, #28]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002914:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291c:	4903      	ldr	r1, [pc, #12]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002924:	e008      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	74bb      	strb	r3, [r7, #18]
 800292a:	e005      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800292c:	40021000 	.word	0x40021000
 8002930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002938:	7c7b      	ldrb	r3, [r7, #17]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4ba7      	ldr	r3, [pc, #668]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	4aa6      	ldr	r2, [pc, #664]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002948:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002956:	4ba1      	ldr	r3, [pc, #644]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295c:	f023 0203 	bic.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	499d      	ldr	r1, [pc, #628]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002978:	4b98      	ldr	r3, [pc, #608]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	f023 020c 	bic.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4995      	ldr	r1, [pc, #596]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800299a:	4b90      	ldr	r3, [pc, #576]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	498c      	ldr	r1, [pc, #560]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029bc:	4b87      	ldr	r3, [pc, #540]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	4984      	ldr	r1, [pc, #528]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029de:	4b7f      	ldr	r3, [pc, #508]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	497b      	ldr	r1, [pc, #492]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a00:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4973      	ldr	r1, [pc, #460]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a22:	4b6e      	ldr	r3, [pc, #440]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	496a      	ldr	r1, [pc, #424]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a44:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4962      	ldr	r1, [pc, #392]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a66:	4b5d      	ldr	r3, [pc, #372]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	4959      	ldr	r1, [pc, #356]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a88:	4b54      	ldr	r3, [pc, #336]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	4951      	ldr	r1, [pc, #324]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	4948      	ldr	r1, [pc, #288]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aca:	4b44      	ldr	r3, [pc, #272]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4a43      	ldr	r2, [pc, #268]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d015      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	493a      	ldr	r1, [pc, #232]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b00:	d105      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b02:	4b36      	ldr	r3, [pc, #216]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a35      	ldr	r2, [pc, #212]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b0c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d015      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b1a:	4b30      	ldr	r3, [pc, #192]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	492c      	ldr	r1, [pc, #176]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b38:	d105      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b44:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d015      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b52:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	491e      	ldr	r1, [pc, #120]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b70:	d105      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b72:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a19      	ldr	r2, [pc, #100]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b7c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d015      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b8a:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	4910      	ldr	r1, [pc, #64]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4a0b      	ldr	r2, [pc, #44]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bb4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d018      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	4902      	ldr	r1, [pc, #8]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	e001      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002be8:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a20      	ldr	r2, [pc, #128]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	4918      	ldr	r1, [pc, #96]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c20:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c38:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c46:	490a      	ldr	r1, [pc, #40]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c56:	d105      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c64:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e042      	b.n	8002d0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fd fe43 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2224      	movs	r2, #36	@ 0x24
 8002ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fb24 	bl	800330c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f825 	bl	8002d14 <UART_SetConfig>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e01b      	b.n	8002d0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fba3 	bl	8003450 <UART_CheckIdleState>
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d18:	b08c      	sub	sp, #48	@ 0x30
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4baa      	ldr	r3, [pc, #680]	@ (8002fec <UART_SetConfig+0x2d8>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a9f      	ldr	r2, [pc, #636]	@ (8002ff0 <UART_SetConfig+0x2dc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	f023 010f 	bic.w	r1, r3, #15
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a90      	ldr	r2, [pc, #576]	@ (8002ff4 <UART_SetConfig+0x2e0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d125      	bne.n	8002e04 <UART_SetConfig+0xf0>
 8002db8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ff8 <UART_SetConfig+0x2e4>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d81a      	bhi.n	8002dfc <UART_SetConfig+0xe8>
 8002dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <UART_SetConfig+0xb8>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002ded 	.word	0x08002ded
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002df5 	.word	0x08002df5
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002de2:	e116      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002de4:	2302      	movs	r3, #2
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dea:	e112      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002dec:	2304      	movs	r3, #4
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df2:	e10e      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002df4:	2308      	movs	r3, #8
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfa:	e10a      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e106      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a7c      	ldr	r2, [pc, #496]	@ (8002ffc <UART_SetConfig+0x2e8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d138      	bne.n	8002e80 <UART_SetConfig+0x16c>
 8002e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002ff8 <UART_SetConfig+0x2e4>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	d82d      	bhi.n	8002e78 <UART_SetConfig+0x164>
 8002e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <UART_SetConfig+0x110>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08002e79 	.word	0x08002e79
 8002e2c:	08002e79 	.word	0x08002e79
 8002e30:	08002e79 	.word	0x08002e79
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002e79 	.word	0x08002e79
 8002e3c:	08002e79 	.word	0x08002e79
 8002e40:	08002e79 	.word	0x08002e79
 8002e44:	08002e61 	.word	0x08002e61
 8002e48:	08002e79 	.word	0x08002e79
 8002e4c:	08002e79 	.word	0x08002e79
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e71 	.word	0x08002e71
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e5e:	e0d8      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e66:	e0d4      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e6e:	e0d0      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002e70:	2308      	movs	r3, #8
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e76:	e0cc      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7e:	e0c8      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5e      	ldr	r2, [pc, #376]	@ (8003000 <UART_SetConfig+0x2ec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d125      	bne.n	8002ed6 <UART_SetConfig+0x1c2>
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff8 <UART_SetConfig+0x2e4>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d016      	beq.n	8002ec6 <UART_SetConfig+0x1b2>
 8002e98:	2b30      	cmp	r3, #48	@ 0x30
 8002e9a:	d818      	bhi.n	8002ece <UART_SetConfig+0x1ba>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d00a      	beq.n	8002eb6 <UART_SetConfig+0x1a2>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d814      	bhi.n	8002ece <UART_SetConfig+0x1ba>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <UART_SetConfig+0x19a>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d008      	beq.n	8002ebe <UART_SetConfig+0x1aa>
 8002eac:	e00f      	b.n	8002ece <UART_SetConfig+0x1ba>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb4:	e0ad      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ebc:	e0a9      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec4:	e0a5      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ecc:	e0a1      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002ece:	2310      	movs	r3, #16
 8002ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed4:	e09d      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4a      	ldr	r2, [pc, #296]	@ (8003004 <UART_SetConfig+0x2f0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d125      	bne.n	8002f2c <UART_SetConfig+0x218>
 8002ee0:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <UART_SetConfig+0x2e4>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eec:	d016      	beq.n	8002f1c <UART_SetConfig+0x208>
 8002eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ef0:	d818      	bhi.n	8002f24 <UART_SetConfig+0x210>
 8002ef2:	2b80      	cmp	r3, #128	@ 0x80
 8002ef4:	d00a      	beq.n	8002f0c <UART_SetConfig+0x1f8>
 8002ef6:	2b80      	cmp	r3, #128	@ 0x80
 8002ef8:	d814      	bhi.n	8002f24 <UART_SetConfig+0x210>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <UART_SetConfig+0x1f0>
 8002efe:	2b40      	cmp	r3, #64	@ 0x40
 8002f00:	d008      	beq.n	8002f14 <UART_SetConfig+0x200>
 8002f02:	e00f      	b.n	8002f24 <UART_SetConfig+0x210>
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0a:	e082      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f12:	e07e      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f14:	2304      	movs	r3, #4
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1a:	e07a      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f22:	e076      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f24:	2310      	movs	r3, #16
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2a:	e072      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a35      	ldr	r2, [pc, #212]	@ (8003008 <UART_SetConfig+0x2f4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12a      	bne.n	8002f8c <UART_SetConfig+0x278>
 8002f36:	4b30      	ldr	r3, [pc, #192]	@ (8002ff8 <UART_SetConfig+0x2e4>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f44:	d01a      	beq.n	8002f7c <UART_SetConfig+0x268>
 8002f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f4a:	d81b      	bhi.n	8002f84 <UART_SetConfig+0x270>
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f50:	d00c      	beq.n	8002f6c <UART_SetConfig+0x258>
 8002f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f56:	d815      	bhi.n	8002f84 <UART_SetConfig+0x270>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <UART_SetConfig+0x250>
 8002f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f60:	d008      	beq.n	8002f74 <UART_SetConfig+0x260>
 8002f62:	e00f      	b.n	8002f84 <UART_SetConfig+0x270>
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6a:	e052      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f72:	e04e      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f74:	2304      	movs	r3, #4
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7a:	e04a      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f82:	e046      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f84:	2310      	movs	r3, #16
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8a:	e042      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a17      	ldr	r2, [pc, #92]	@ (8002ff0 <UART_SetConfig+0x2dc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d13a      	bne.n	800300c <UART_SetConfig+0x2f8>
 8002f96:	4b18      	ldr	r3, [pc, #96]	@ (8002ff8 <UART_SetConfig+0x2e4>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fa4:	d01a      	beq.n	8002fdc <UART_SetConfig+0x2c8>
 8002fa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002faa:	d81b      	bhi.n	8002fe4 <UART_SetConfig+0x2d0>
 8002fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb0:	d00c      	beq.n	8002fcc <UART_SetConfig+0x2b8>
 8002fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb6:	d815      	bhi.n	8002fe4 <UART_SetConfig+0x2d0>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <UART_SetConfig+0x2b0>
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc0:	d008      	beq.n	8002fd4 <UART_SetConfig+0x2c0>
 8002fc2:	e00f      	b.n	8002fe4 <UART_SetConfig+0x2d0>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fca:	e022      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fd2:	e01e      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fda:	e01a      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe2:	e016      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fea:	e012      	b.n	8003012 <UART_SetConfig+0x2fe>
 8002fec:	cfff69f3 	.word	0xcfff69f3
 8002ff0:	40008000 	.word	0x40008000
 8002ff4:	40013800 	.word	0x40013800
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40004400 	.word	0x40004400
 8003000:	40004800 	.word	0x40004800
 8003004:	40004c00 	.word	0x40004c00
 8003008:	40005000 	.word	0x40005000
 800300c:	2310      	movs	r3, #16
 800300e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4aae      	ldr	r2, [pc, #696]	@ (80032d0 <UART_SetConfig+0x5bc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	f040 8097 	bne.w	800314c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800301e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003022:	2b08      	cmp	r3, #8
 8003024:	d823      	bhi.n	800306e <UART_SetConfig+0x35a>
 8003026:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <UART_SetConfig+0x318>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	08003051 	.word	0x08003051
 8003030:	0800306f 	.word	0x0800306f
 8003034:	08003059 	.word	0x08003059
 8003038:	0800306f 	.word	0x0800306f
 800303c:	0800305f 	.word	0x0800305f
 8003040:	0800306f 	.word	0x0800306f
 8003044:	0800306f 	.word	0x0800306f
 8003048:	0800306f 	.word	0x0800306f
 800304c:	08003067 	.word	0x08003067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7ff fb62 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8003054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003056:	e010      	b.n	800307a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003058:	4b9e      	ldr	r3, [pc, #632]	@ (80032d4 <UART_SetConfig+0x5c0>)
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800305c:	e00d      	b.n	800307a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305e:	f7ff faed 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8003062:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003064:	e009      	b.n	800307a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800306c:	e005      	b.n	800307a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8130 	beq.w	80032e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	4a94      	ldr	r2, [pc, #592]	@ (80032d8 <UART_SetConfig+0x5c4>)
 8003088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800308c:	461a      	mov	r2, r3
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	fbb3 f3f2 	udiv	r3, r3, r2
 8003094:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d305      	bcc.n	80030b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d903      	bls.n	80030ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030b8:	e113      	b.n	80032e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	2200      	movs	r2, #0
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	60fa      	str	r2, [r7, #12]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	4a84      	ldr	r2, [pc, #528]	@ (80032d8 <UART_SetConfig+0x5c4>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030dc:	f7fd f89c 	bl	8000218 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	020b      	lsls	r3, r1, #8
 80030f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030f6:	0202      	lsls	r2, r0, #8
 80030f8:	6979      	ldr	r1, [r7, #20]
 80030fa:	6849      	ldr	r1, [r1, #4]
 80030fc:	0849      	lsrs	r1, r1, #1
 80030fe:	2000      	movs	r0, #0
 8003100:	460c      	mov	r4, r1
 8003102:	4605      	mov	r5, r0
 8003104:	eb12 0804 	adds.w	r8, r2, r4
 8003108:	eb43 0905 	adc.w	r9, r3, r5
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	469a      	mov	sl, r3
 8003114:	4693      	mov	fp, r2
 8003116:	4652      	mov	r2, sl
 8003118:	465b      	mov	r3, fp
 800311a:	4640      	mov	r0, r8
 800311c:	4649      	mov	r1, r9
 800311e:	f7fd f87b 	bl	8000218 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4613      	mov	r3, r2
 8003128:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003130:	d308      	bcc.n	8003144 <UART_SetConfig+0x430>
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003138:	d204      	bcs.n	8003144 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a3a      	ldr	r2, [r7, #32]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	e0ce      	b.n	80032e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800314a:	e0ca      	b.n	80032e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003154:	d166      	bne.n	8003224 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800315a:	2b08      	cmp	r3, #8
 800315c:	d827      	bhi.n	80031ae <UART_SetConfig+0x49a>
 800315e:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <UART_SetConfig+0x450>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003189 	.word	0x08003189
 8003168:	08003191 	.word	0x08003191
 800316c:	08003199 	.word	0x08003199
 8003170:	080031af 	.word	0x080031af
 8003174:	0800319f 	.word	0x0800319f
 8003178:	080031af 	.word	0x080031af
 800317c:	080031af 	.word	0x080031af
 8003180:	080031af 	.word	0x080031af
 8003184:	080031a7 	.word	0x080031a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7ff fac6 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 800318c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800318e:	e014      	b.n	80031ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7ff fad8 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003196:	e010      	b.n	80031ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003198:	4b4e      	ldr	r3, [pc, #312]	@ (80032d4 <UART_SetConfig+0x5c0>)
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800319c:	e00d      	b.n	80031ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7ff fa4d 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80031a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031a4:	e009      	b.n	80031ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031ac:	e005      	b.n	80031ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8090 	beq.w	80032e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	4a44      	ldr	r2, [pc, #272]	@ (80032d8 <UART_SetConfig+0x5c4>)
 80031c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031cc:	461a      	mov	r2, r3
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80031d4:	005a      	lsls	r2, r3, #1
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	441a      	add	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	d916      	bls.n	800321c <UART_SetConfig+0x508>
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f4:	d212      	bcs.n	800321c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f023 030f 	bic.w	r3, r3, #15
 80031fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	b29b      	uxth	r3, r3
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	b29a      	uxth	r2, r3
 800320c:	8bfb      	ldrh	r3, [r7, #30]
 800320e:	4313      	orrs	r3, r2
 8003210:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	8bfa      	ldrh	r2, [r7, #30]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	e062      	b.n	80032e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003222:	e05e      	b.n	80032e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003224:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003228:	2b08      	cmp	r3, #8
 800322a:	d828      	bhi.n	800327e <UART_SetConfig+0x56a>
 800322c:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <UART_SetConfig+0x520>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	0800327f 	.word	0x0800327f
 8003244:	0800326f 	.word	0x0800326f
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800327f 	.word	0x0800327f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7ff fa5e 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 800325c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800325e:	e014      	b.n	800328a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7ff fa70 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003266:	e010      	b.n	800328a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <UART_SetConfig+0x5c0>)
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800326c:	e00d      	b.n	800328a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7ff f9e5 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8003272:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003274:	e009      	b.n	800328a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800327c:	e005      	b.n	800328a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003288:	bf00      	nop
    }

    if (pclk != 0U)
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d028      	beq.n	80032e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	4a10      	ldr	r2, [pc, #64]	@ (80032d8 <UART_SetConfig+0x5c4>)
 8003296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800329a:	461a      	mov	r2, r3
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	fbb3 f2f2 	udiv	r2, r3, r2
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	441a      	add	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	2b0f      	cmp	r3, #15
 80032b8:	d910      	bls.n	80032dc <UART_SetConfig+0x5c8>
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d20c      	bcs.n	80032dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	e009      	b.n	80032e2 <UART_SetConfig+0x5ce>
 80032ce:	bf00      	nop
 80032d0:	40008000 	.word	0x40008000
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	080039e8 	.word	0x080039e8
      }
      else
      {
        ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003302:	4618      	mov	r0, r3
 8003304:	3730      	adds	r7, #48	@ 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800330c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01a      	beq.n	8003422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340a:	d10a      	bne.n	8003422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b098      	sub	sp, #96	@ 0x60
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003460:	f7fd fb92 	bl	8000b88 <HAL_GetTick>
 8003464:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b08      	cmp	r3, #8
 8003472:	d12f      	bne.n	80034d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f88e 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d022      	beq.n	80034d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e6      	bne.n	800348e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e063      	b.n	800359c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d149      	bne.n	8003576 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ea:	2200      	movs	r2, #0
 80034ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f857 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d03c      	beq.n	8003576 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	623b      	str	r3, [r7, #32]
   return(result);
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30
 800351c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e6      	bne.n	80034fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	60fb      	str	r3, [r7, #12]
   return(result);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800354e:	61fa      	str	r2, [r7, #28]
 8003550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	617b      	str	r3, [r7, #20]
   return(result);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e012      	b.n	800359c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3758      	adds	r7, #88	@ 0x58
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	e04f      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d04b      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fd fae3 	bl	8000b88 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e04e      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d037      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b80      	cmp	r3, #128	@ 0x80
 80035ea:	d034      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b40      	cmp	r3, #64	@ 0x40
 80035f0:	d031      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d110      	bne.n	8003622 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2208      	movs	r2, #8
 8003606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f838 	bl	800367e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2208      	movs	r2, #8
 8003612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e029      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003630:	d111      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800363a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f81e 	bl	800367e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e00f      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	429a      	cmp	r2, r3
 8003672:	d0a0      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800367e:	b480      	push	{r7}
 8003680:	b095      	sub	sp, #84	@ 0x54
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800369a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e6      	bne.n	8003686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3308      	adds	r3, #8
 80036be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3308      	adds	r3, #8
 80036da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e3      	bne.n	80036b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d118      	bne.n	800372a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	60bb      	str	r3, [r7, #8]
   return(result);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0310 	bic.w	r3, r3, #16
 800370c:	647b      	str	r3, [r7, #68]	@ 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6979      	ldr	r1, [r7, #20]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	613b      	str	r3, [r7, #16]
   return(result);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e6      	bne.n	80036f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800373e:	bf00      	nop
 8003740:	3754      	adds	r7, #84	@ 0x54
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_UARTEx_DisableFifoMode+0x16>
 800375c:	2302      	movs	r3, #2
 800375e:	e027      	b.n	80037b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	@ 0x24
 800376c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800378e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e02d      	b.n	8003830 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f84f 	bl	80038b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800384c:	2302      	movs	r3, #2
 800384e:	e02d      	b.n	80038ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	@ 0x24
 800385c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f811 	bl	80038b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d108      	bne.n	80038d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038d4:	e031      	b.n	800393a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038d6:	2308      	movs	r3, #8
 80038d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038da:	2308      	movs	r3, #8
 80038dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	0e5b      	lsrs	r3, r3, #25
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	0f5b      	lsrs	r3, r3, #29
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038fe:	7bbb      	ldrb	r3, [r7, #14]
 8003900:	7b3a      	ldrb	r2, [r7, #12]
 8003902:	4911      	ldr	r1, [pc, #68]	@ (8003948 <UARTEx_SetNbDataToProcess+0x94>)
 8003904:	5c8a      	ldrb	r2, [r1, r2]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800390a:	7b3a      	ldrb	r2, [r7, #12]
 800390c:	490f      	ldr	r1, [pc, #60]	@ (800394c <UARTEx_SetNbDataToProcess+0x98>)
 800390e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003910:	fb93 f3f2 	sdiv	r3, r3, r2
 8003914:	b29a      	uxth	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	7b7a      	ldrb	r2, [r7, #13]
 8003920:	4909      	ldr	r1, [pc, #36]	@ (8003948 <UARTEx_SetNbDataToProcess+0x94>)
 8003922:	5c8a      	ldrb	r2, [r1, r2]
 8003924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003928:	7b7a      	ldrb	r2, [r7, #13]
 800392a:	4908      	ldr	r1, [pc, #32]	@ (800394c <UARTEx_SetNbDataToProcess+0x98>)
 800392c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800392e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	08003a00 	.word	0x08003a00
 800394c:	08003a08 	.word	0x08003a08

08003950 <memset>:
 8003950:	4402      	add	r2, r0
 8003952:	4603      	mov	r3, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <__libc_init_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	4d0d      	ldr	r5, [pc, #52]	@ (8003998 <__libc_init_array+0x38>)
 8003964:	4c0d      	ldr	r4, [pc, #52]	@ (800399c <__libc_init_array+0x3c>)
 8003966:	1b64      	subs	r4, r4, r5
 8003968:	10a4      	asrs	r4, r4, #2
 800396a:	2600      	movs	r6, #0
 800396c:	42a6      	cmp	r6, r4
 800396e:	d109      	bne.n	8003984 <__libc_init_array+0x24>
 8003970:	4d0b      	ldr	r5, [pc, #44]	@ (80039a0 <__libc_init_array+0x40>)
 8003972:	4c0c      	ldr	r4, [pc, #48]	@ (80039a4 <__libc_init_array+0x44>)
 8003974:	f000 f818 	bl	80039a8 <_init>
 8003978:	1b64      	subs	r4, r4, r5
 800397a:	10a4      	asrs	r4, r4, #2
 800397c:	2600      	movs	r6, #0
 800397e:	42a6      	cmp	r6, r4
 8003980:	d105      	bne.n	800398e <__libc_init_array+0x2e>
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	f855 3b04 	ldr.w	r3, [r5], #4
 8003988:	4798      	blx	r3
 800398a:	3601      	adds	r6, #1
 800398c:	e7ee      	b.n	800396c <__libc_init_array+0xc>
 800398e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003992:	4798      	blx	r3
 8003994:	3601      	adds	r6, #1
 8003996:	e7f2      	b.n	800397e <__libc_init_array+0x1e>
 8003998:	08003a18 	.word	0x08003a18
 800399c:	08003a18 	.word	0x08003a18
 80039a0:	08003a18 	.word	0x08003a18
 80039a4:	08003a1c 	.word	0x08003a1c

080039a8 <_init>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr

080039b4 <_fini>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr
