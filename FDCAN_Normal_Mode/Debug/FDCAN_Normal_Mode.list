
FDCAN_Normal_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f64  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800413c  0800413c  0000513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800418c  0800418c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800418c  0800418c  0000518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004194  08004194  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004194  08004194  00005194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004198  08004198  00005198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800419c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  080041a8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080041a8  000061c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001414a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244d  00000000  00000000  0001a186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dec  00000000  00000000  0001d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed62  00000000  00000000  0001e594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b59  00000000  00000000  0003d2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce9f7  00000000  00000000  00050e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d0c  00000000  00000000  0011f88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00124598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004124 	.word	0x08004124

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004124 	.word	0x08004124

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_FDCAN_RxFifo0Callback>:
uint8_t					TxData[12];
uint8_t					RxData[12];

int indx = 0;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d014      	beq.n	8000546 <HAL_FDCAN_RxFifo0Callback+0x3e>
		/* Retreive Rx messages from Rx FIFO0 */
		if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800051e:	4a0d      	ldr	r2, [pc, #52]	@ (8000554 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000520:	2140      	movs	r1, #64	@ 0x40
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 fe90 	bl	8001248 <HAL_FDCAN_GetRxMessage>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 800052e:	f000 f9a5 	bl	800087c <Error_Handler>
		}
		if(HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK){
 8000532:	2200      	movs	r2, #0
 8000534:	2101      	movs	r1, #1
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 ff8e 	bl	8001458 <HAL_FDCAN_ActivateNotification>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_FDCAN_RxFifo0Callback+0x3e>
			/* Notification Error */
			Error_Handler();
 8000542:	f000 f99b 	bl	800087c <Error_Handler>
		}
	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200001b8 	.word	0x200001b8
 8000554:	20000190 	.word	0x20000190

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fb17 	bl	8000b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f83c 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f95a 	bl	800081c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000568:	f000 f878 	bl	800065c <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 800056c:	f000 f8d6 	bl	800071c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8000570:	f000 f91e 	bl	80007b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8000574:	4817      	ldr	r0, [pc, #92]	@ (80005d4 <main+0x7c>)
 8000576:	f000 fe3f 	bl	80011f8 <HAL_FDCAN_Start>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <main+0x2c>
	  Error_Handler();
 8000580:	f000 f97c 	bl	800087c <Error_Handler>
  }

  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK){
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <main+0x7c>)
 800058a:	f000 ff65 	bl	8001458 <HAL_FDCAN_ActivateNotification>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <main+0x40>
	  /*
	   * Notification Error
	   */
	  Error_Handler();
 8000594:	f000 f972 	bl	800087c <Error_Handler>
  }
  TxHeader.Identifier = 0x11;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <main+0x80>)
 800059a:	2211      	movs	r2, #17
 800059c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <main+0x80>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <main+0x80>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <main+0x80>)
 80005ac:	2209      	movs	r2, #9
 80005ae:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <main+0x80>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <main+0x80>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <main+0x80>)
 80005be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80005c2:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <main+0x80>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80005ca:	4b03      	ldr	r3, [pc, #12]	@ (80005d8 <main+0x80>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x78>
 80005d4:	20000028 	.word	0x20000028
 80005d8:	2000016c 	.word	0x2000016c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2238      	movs	r2, #56	@ 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fd6e 	bl	80040cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f001 fb81 	bl	8001d08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2340      	movs	r3, #64	@ 0x40
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fc27 	bl	8001e70 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000628:	f000 f928 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000630:	2301      	movs	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f001 ff25 	bl	8002494 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000650:	f000 f914 	bl	800087c <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	@ 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 8000664:	4a2c      	ldr	r2, [pc, #176]	@ (8000718 <MX_FDCAN1_Init+0xbc>)
 8000666:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 8000670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000674:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000676:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800067c:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 800067e:	2201      	movs	r2, #1
 8000680:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000682:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 8000684:	2201      	movs	r2, #1
 8000686:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 800068a:	2200      	movs	r2, #0
 800068c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800068e:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 8000690:	2204      	movs	r2, #4
 8000692:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 8000696:	2210      	movs	r2, #16
 8000698:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 800069a:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 800069c:	223f      	movs	r2, #63	@ 0x3f
 800069e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006a2:	2210      	movs	r2, #16
 80006a4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 80006ac:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006ae:	2205      	movs	r2, #5
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006b4:	220e      	movs	r2, #14
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006ba:	2205      	movs	r2, #5
 80006bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006c0:	221c      	movs	r2, #28
 80006c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006c6:	2208      	movs	r2, #8
 80006c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006d0:	4810      	ldr	r0, [pc, #64]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006d2:	f000 fbdd 	bl	8000e90 <HAL_FDCAN_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 80006dc:	f000 f8ce 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
FDCAN_FilterTypeDef sFilterConfig;

sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
sFilterConfig.FilterIndex = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
sFilterConfig.FilterID1 = 0x22;
 80006f0:	2322      	movs	r3, #34	@ 0x22
 80006f2:	613b      	str	r3, [r7, #16]
sFilterConfig.FilterID2 = 0x22;
 80006f4:	2322      	movs	r3, #34	@ 0x22
 80006f6:	617b      	str	r3, [r7, #20]
if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_FDCAN1_Init+0xb8>)
 80006fe:	f000 fd21 	bl	8001144 <HAL_FDCAN_ConfigFilter>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_FDCAN1_Init+0xb0>
	Error_Handler();
 8000708:	f000 f8b8 	bl	800087c <Error_Handler>
}
  /* USER CODE END FDCAN1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000028 	.word	0x20000028
 8000718:	40006400 	.word	0x40006400

0800071c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000722:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000728:	4a20      	ldr	r2, [pc, #128]	@ (80007ac <MX_LPUART1_UART_Init+0x90>)
 800072a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000740:	220c      	movs	r2, #12
 8000742:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800075c:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 800075e:	f002 fe47 	bl	80033f0 <HAL_UART_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000768:	f000 f888 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000770:	f003 fbe2 	bl	8003f38 <HAL_UARTEx_SetTxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800077a:	f000 f87f 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000782:	f003 fc17 	bl	8003fb4 <HAL_UARTEx_SetRxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800078c:	f000 f876 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_LPUART1_UART_Init+0x88>)
 8000792:	f003 fb98 	bl	8003ec6 <HAL_UARTEx_DisableFifoMode>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800079c:	f000 f86e 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	40008000 	.word	0x40008000
 80007ac:	00033324 	.word	0x00033324

080007b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_TIM6_Init+0x64>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_TIM6_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_TIM6_Init+0x64>)
 80007c8:	22a9      	movs	r2, #169	@ 0xa9
 80007ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_TIM6_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_TIM6_Init+0x64>)
 80007d4:	2263      	movs	r2, #99	@ 0x63
 80007d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_TIM6_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <MX_TIM6_Init+0x64>)
 80007e0:	f002 fab0 	bl	8002d44 <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80007ea:	f000 f847 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <MX_TIM6_Init+0x64>)
 80007fc:	f002 fd24 	bl	8003248 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000806:	f000 f839 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000120 	.word	0x20000120
 8000818:	40001000 	.word	0x40001000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_GPIO_Init+0x5c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_GPIO_Init+0x5c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <HAL_MspInit+0x44>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6613      	str	r3, [r2, #96]	@ 0x60
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_MspInit+0x44>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008be:	f001 fac7 	bl	8001e50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09e      	sub	sp, #120	@ 0x78
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2250      	movs	r2, #80	@ 0x50
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fbeb 	bl	80040cc <memset>
  if(hfdcan->Instance==FDCAN1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a24      	ldr	r2, [pc, #144]	@ (800098c <HAL_FDCAN_MspInit+0xbc>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d141      	bne.n	8000984 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f001 ffdb 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800091c:	f7ff ffae 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <HAL_FDCAN_MspInit+0xc0>)
 8000922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000924:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <HAL_FDCAN_MspInit+0xc0>)
 8000926:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800092a:	6593      	str	r3, [r2, #88]	@ 0x58
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_FDCAN_MspInit+0xc0>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_FDCAN_MspInit+0xc0>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <HAL_FDCAN_MspInit+0xc0>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_FDCAN_MspInit+0xc0>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000950:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000954:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000962:	2309      	movs	r3, #9
 8000964:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f001 f848 	bl	8001a04 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2015      	movs	r0, #21
 800097a:	f000 fa54 	bl	8000e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800097e:	2015      	movs	r0, #21
 8000980:	f000 fa6b 	bl	8000e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000984:	bf00      	nop
 8000986:	3778      	adds	r7, #120	@ 0x78
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40006400 	.word	0x40006400
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09e      	sub	sp, #120	@ 0x78
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2250      	movs	r2, #80	@ 0x50
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fb89 	bl	80040cc <memset>
  if(huart->Instance==LPUART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1e      	ldr	r2, [pc, #120]	@ (8000a38 <HAL_UART_MspInit+0xa4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d135      	bne.n	8000a30 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009c4:	2320      	movs	r3, #32
 80009c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 ff7b 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff ff4e 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <HAL_UART_MspInit+0xa8>)
 80009e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009e4:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <HAL_UART_MspInit+0xa8>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <HAL_UART_MspInit+0xa8>)
 80009ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_UART_MspInit+0xa8>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <HAL_UART_MspInit+0xa8>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a04:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_UART_MspInit+0xa8>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a10:	2303      	movs	r3, #3
 8000a12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a20:	2308      	movs	r3, #8
 8000a22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <HAL_UART_MspInit+0xac>)
 8000a2c:	f000 ffea 	bl	8001a04 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a30:	bf00      	nop
 8000a32:	3778      	adds	r7, #120	@ 0x78
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40008000 	.word	0x40008000
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000800 	.word	0x48000800

08000a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <HAL_TIM_Base_MspInit+0x44>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d113      	bne.n	8000a7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <HAL_TIM_Base_MspInit+0x48>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a8c <HAL_TIM_Base_MspInit+0x48>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <HAL_TIM_Base_MspInit+0x48>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2036      	movs	r0, #54	@ 0x36
 8000a74:	f000 f9d7 	bl	8000e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a78:	2036      	movs	r0, #54	@ 0x36
 8000a7a:	f000 f9ee 	bl	8000e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40001000 	.word	0x40001000
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f8a5 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <FDCAN1_IT0_IRQHandler+0x10>)
 8000af6:	f000 fd95 	bl	8001624 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000028 	.word	0x20000028

08000b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <TIM6_DAC_IRQHandler+0x10>)
 8000b0a:	f002 f972 	bl	8002df2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000120 	.word	0x20000120

08000b18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f003 fab7 	bl	80040dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6e:	f7ff fcf3 	bl	8000558 <main>

08000b72 <LoopForever>:

LoopForever:
    b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   r0, =_estack
 8000b74:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b80:	0800419c 	.word	0x0800419c
  ldr r2, =_sbss
 8000b84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b88:	200001c8 	.word	0x200001c8

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>

08000b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f939 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f80e 	bl	8000bc0 <HAL_InitTick>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	e001      	b.n	8000bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb0:	f7ff fe6a 	bl	8000888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]

}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_InitTick+0x68>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d022      	beq.n	8000c1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <HAL_InitTick+0x6c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <HAL_InitTick+0x68>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f944 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10f      	bne.n	8000c14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	d809      	bhi.n	8000c0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8000c02:	f000 f910 	bl	8000e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_InitTick+0x70>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e007      	b.n	8000c1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e004      	b.n	8000c1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e001      	b.n	8000c1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a03      	ldr	r2, [pc, #12]	@ (8000c50 <HAL_IncTick+0x1c>)
 8000c44:	6013      	str	r3, [r2, #0]
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	200001c4 	.word	0x200001c4
 8000c54:	20000008 	.word	0x20000008

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200001c4 	.word	0x200001c4

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff40 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff33 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa4 	bl	8000dcc <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e147      	b.n	8001132 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d106      	bne.n	8000ebc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fd0a 	bl	80008d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0210 	bic.w	r2, r2, #16
 8000eca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ecc:	f7ff fec4 	bl	8000c58 <HAL_GetTick>
 8000ed0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ed2:	e012      	b.n	8000efa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ed4:	f7ff fec0 	bl	8000c58 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b0a      	cmp	r3, #10
 8000ee0:	d90b      	bls.n	8000efa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee6:	f043 0201 	orr.w	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e11b      	b.n	8001132 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d0e5      	beq.n	8000ed4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	699a      	ldr	r2, [r3, #24]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f18:	f7ff fe9e 	bl	8000c58 <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f1e:	e012      	b.n	8000f46 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f20:	f7ff fe9a 	bl	8000c58 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d90b      	bls.n	8000f46 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e0f5      	b.n	8001132 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0e5      	beq.n	8000f20 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699a      	ldr	r2, [r3, #24]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0202 	orr.w	r2, r2, #2
 8000f62:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a74      	ldr	r2, [pc, #464]	@ (800113c <HAL_FDCAN_Init+0x2ac>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d103      	bne.n	8000f76 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000f6e:	4a74      	ldr	r2, [pc, #464]	@ (8001140 <HAL_FDCAN_Init+0x2b0>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7c1b      	ldrb	r3, [r3, #16]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d108      	bne.n	8000f90 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	699a      	ldr	r2, [r3, #24]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f8c:	619a      	str	r2, [r3, #24]
 8000f8e:	e007      	b.n	8000fa0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f9e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7c5b      	ldrb	r3, [r3, #17]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d108      	bne.n	8000fba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	699a      	ldr	r2, [r3, #24]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	e007      	b.n	8000fca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699a      	ldr	r2, [r3, #24]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000fc8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7c9b      	ldrb	r3, [r3, #18]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d108      	bne.n	8000fe4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000fe0:	619a      	str	r2, [r3, #24]
 8000fe2:	e007      	b.n	8000ff4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ff2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	699a      	ldr	r2, [r3, #24]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001018:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0210 	bic.w	r2, r2, #16
 8001028:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d108      	bne.n	8001044 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	619a      	str	r2, [r3, #24]
 8001042:	e02c      	b.n	800109e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d028      	beq.n	800109e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d01c      	beq.n	800108e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699a      	ldr	r2, [r3, #24]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001062:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0210 	orr.w	r2, r2, #16
 8001072:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d110      	bne.n	800109e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0220 	orr.w	r2, r2, #32
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	e007      	b.n	800109e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0220 	orr.w	r2, r2, #32
 800109c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	3b01      	subs	r3, #1
 80010c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80010d2:	d115      	bne.n	8001100 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010de:	3b01      	subs	r3, #1
 80010e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e8:	3b01      	subs	r3, #1
 80010ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	3b01      	subs	r3, #1
 80010f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fc12 	bl	8001940 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40006400 	.word	0x40006400
 8001140:	40006500 	.word	0x40006500

08001144 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001154:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <HAL_FDCAN_ConfigFilter+0x1e>
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d13d      	bne.n	80011de <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d119      	bne.n	800119e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001176:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800117e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e01d      	b.n	80011da <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	075a      	lsls	r2, r3, #29
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	079a      	lsls	r2, r3, #30
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	3304      	adds	r3, #4
 80011d2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e006      	b.n	80011ec <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	f043 0202 	orr.w	r2, r3, #2
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
  }
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d110      	bne.n	800122e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e006      	b.n	800123c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001232:	f043 0204 	orr.w	r2, r3, #4
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
  }
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001248:	b480      	push	{r7}
 800124a:	b08b      	sub	sp, #44	@ 0x2c
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001260:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001262:	7efb      	ldrb	r3, [r7, #27]
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 80e8 	bne.w	800143a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b40      	cmp	r3, #64	@ 0x40
 800126e:	d137      	bne.n	80012e0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001284:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0db      	b.n	8001448 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001298:	0e1b      	lsrs	r3, r3, #24
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d10a      	bne.n	80012b8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012aa:	0a5b      	lsrs	r3, r3, #9
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012de:	e036      	b.n	800134e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0a3      	b.n	8001448 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001308:	0e1b      	lsrs	r3, r3, #24
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10a      	bne.n	8001328 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	4613      	mov	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d107      	bne.n	8001372 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	0c9b      	lsrs	r3, r3, #18
 8001368:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e005      	b.n	800137e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	3304      	adds	r3, #4
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	0c1b      	lsrs	r3, r3, #16
 80013ac:	f003 020f 	and.w	r2, r3, #15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0e1b      	lsrs	r3, r3, #24
 80013d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	0fda      	lsrs	r2, r3, #31
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	3304      	adds	r3, #4
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	e00a      	b.n	800140a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	441a      	add	r2, r3
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	440b      	add	r3, r1
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	3301      	adds	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	461a      	mov	r2, r3
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	4293      	cmp	r3, r2
 8001418:	d3ec      	bcc.n	80013f4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b40      	cmp	r3, #64	@ 0x40
 800141e:	d105      	bne.n	800142c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800142a:	e004      	b.n	8001436 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e006      	b.n	8001448 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	f043 0208 	orr.w	r2, r3, #8
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
  }
}
 8001448:	4618      	mov	r0, r3
 800144a:	372c      	adds	r7, #44	@ 0x2c
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	08004154 	.word	0x08004154

08001458 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800146a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d003      	beq.n	800147a <HAL_FDCAN_ActivateNotification+0x22>
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b02      	cmp	r3, #2
 8001476:	f040 80c8 	bne.w	800160a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d03b      	beq.n	800150e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d031      	beq.n	800150e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d027      	beq.n	800150e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01d      	beq.n	800150e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d013      	beq.n	800150e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d004      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00c      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d13b      	bne.n	80015aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d131      	bne.n	80015aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d127      	bne.n	80015aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11d      	bne.n	80015aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d113      	bne.n	80015aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0202 	orr.w	r2, r2, #2
 80015b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	430a      	orrs	r2, r1
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e006      	b.n	8001618 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	f043 0202 	orr.w	r2, r3, #2
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	@ 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001632:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001640:	4013      	ands	r3, r2
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001658:	4013      	ands	r3, r2
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001670:	4013      	ands	r3, r2
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800167a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800167e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	4013      	ands	r3, r2
 800168a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001692:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001696:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016aa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2240      	movs	r2, #64	@ 0x40
 80016ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f916 	bl	8001902 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d019      	beq.n	8001714 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d014      	beq.n	8001714 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016f2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800170c:	6939      	ldr	r1, [r7, #16]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8d8 	bl	80018c4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001720:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f8a2 	bl	800186e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001736:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe fee4 	bl	8000508 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800174e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f897 	bl	8001884 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001772:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f890 	bl	800189a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001780:	2b00      	cmp	r3, #0
 8001782:	d018      	beq.n	80017b6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178a:	2b00      	cmp	r3, #0
 800178c:	d013      	beq.n	80017b6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001796:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80017ae:	68f9      	ldr	r1, [r7, #12]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f87c 	bl	80018ae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00c      	beq.n	80017da <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f880 	bl	80018da <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00c      	beq.n	80017fe <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f878 	bl	80018ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00f      	beq.n	8001828 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800181a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001820:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d007      	beq.n	800183e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001836:	69f9      	ldr	r1, [r7, #28]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f876 	bl	800192a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a3a      	ldr	r2, [r7, #32]
 800184a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f858 	bl	8001916 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001866:	bf00      	nop
 8001868:	3730      	adds	r7, #48	@ 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001948:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800194a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2b      	ldr	r2, [pc, #172]	@ (8001a00 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d103      	bne.n	800195e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800195c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800196c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001974:	041a      	lsls	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001992:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199a:	061a      	lsls	r2, r3, #24
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e005      	b.n	80019e0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3f3      	bcc.n	80019d4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	4000a400 	.word	0x4000a400
 8001a00:	40006800 	.word	0x40006800

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a12:	e15a      	b.n	8001cca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 814c 	beq.w	8001cc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 0201 	and.w	r2, r3, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d017      	beq.n	8001ae2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d123      	bne.n	8001b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	6939      	ldr	r1, [r7, #16]
 8001b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0203 	and.w	r2, r3, #3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80a6 	beq.w	8001cc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b78:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce8 <HAL_GPIO_Init+0x2e4>)
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce8 <HAL_GPIO_Init+0x2e4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b84:	4b58      	ldr	r3, [pc, #352]	@ (8001ce8 <HAL_GPIO_Init+0x2e4>)
 8001b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b90:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_GPIO_Init+0x2e8>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bba:	d01f      	beq.n	8001bfc <HAL_GPIO_Init+0x1f8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d019      	beq.n	8001bf8 <HAL_GPIO_Init+0x1f4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_GPIO_Init+0x2f0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d013      	beq.n	8001bf4 <HAL_GPIO_Init+0x1f0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf8 <HAL_GPIO_Init+0x2f4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_GPIO_Init+0x1ec>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a49      	ldr	r2, [pc, #292]	@ (8001cfc <HAL_GPIO_Init+0x2f8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <HAL_GPIO_Init+0x1e8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a48      	ldr	r2, [pc, #288]	@ (8001d00 <HAL_GPIO_Init+0x2fc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001be4:	2305      	movs	r3, #5
 8001be6:	e00a      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001be8:	2306      	movs	r3, #6
 8001bea:	e008      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bec:	2304      	movs	r3, #4
 8001bee:	e006      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e004      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e002      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	f002 0203 	and.w	r2, r2, #3
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	4093      	lsls	r3, r2
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0e:	4937      	ldr	r1, [pc, #220]	@ (8001cec <HAL_GPIO_Init+0x2e8>)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c1c:	4b39      	ldr	r3, [pc, #228]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c46:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c6a:	4a26      	ldr	r2, [pc, #152]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c94:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cbe:	4a11      	ldr	r2, [pc, #68]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f ae9d 	bne.w	8001a14 <HAL_GPIO_Init+0x10>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800
 8001cf8:	48000c00 	.word	0x48000c00
 8001cfc:	48001000 	.word	0x48001000
 8001d00:	48001400 	.word	0x48001400
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d141      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d16:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d22:	d131      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d24:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d34:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d3c:	4a41      	ldr	r2, [pc, #260]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d44:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2232      	movs	r2, #50	@ 0x32
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	3301      	adds	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5a:	e002      	b.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d62:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6e:	d102      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f2      	bne.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d76:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d82:	d158      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e057      	b.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d88:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d98:	e04d      	b.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da0:	d141      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001da2:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dae:	d131      	bne.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db0:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001db6:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc0:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2232      	movs	r2, #50	@ 0x32
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de6:	e002      	b.n	8001dee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dfa:	d102      	bne.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f2      	bne.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d112      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e011      	b.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e24:	e007      	b.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e2e:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40007000 	.word	0x40007000
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	431bde83 	.word	0x431bde83

08001e50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5e:	6093      	str	r3, [r2, #8]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40007000 	.word	0x40007000

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e2fe      	b.n	8002480 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d075      	beq.n	8001f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	4b97      	ldr	r3, [pc, #604]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	4b94      	ldr	r3, [pc, #592]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_OscConfig+0x3e>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x44>
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x108>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d157      	bne.n	8001f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e2d9      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x74>
 8001ed6:	4b85      	ldr	r3, [pc, #532]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a84      	ldr	r2, [pc, #528]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b7f      	ldr	r3, [pc, #508]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b7c      	ldr	r3, [pc, #496]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a7b      	ldr	r2, [pc, #492]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001f08:	4b78      	ldr	r3, [pc, #480]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a77      	ldr	r2, [pc, #476]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b75      	ldr	r3, [pc, #468]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a74      	ldr	r2, [pc, #464]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe fe96 	bl	8000c58 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe fe92 	bl	8000c58 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e29e      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b6a      	ldr	r3, [pc, #424]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe fe82 	bl	8000c58 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe fe7e 	bl	8000c58 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e28a      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6a:	4b60      	ldr	r3, [pc, #384]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0xe8>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f86:	4b59      	ldr	r3, [pc, #356]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f90:	4b56      	ldr	r3, [pc, #344]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x136>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_OscConfig+0x13c>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d11f      	bne.n	8001fec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fac:	4b4f      	ldr	r3, [pc, #316]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x154>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e25d      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b49      	ldr	r3, [pc, #292]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	4946      	ldr	r1, [pc, #280]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fd8:	4b45      	ldr	r3, [pc, #276]	@ (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fdef 	bl	8000bc0 <HAL_InitTick>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d043      	beq.n	8002070 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e249      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7fe fe2a 	bl	8000c58 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7fe fe26 	bl	8000c58 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e232      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201a:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	492d      	ldr	r1, [pc, #180]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
 800203a:	e01a      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203c:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2a      	ldr	r2, [pc, #168]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002042:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe fe06 	bl	8000c58 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7fe fe02 	bl	8000c58 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e20e      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1e0>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d041      	beq.n	8002102 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208c:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7fe fddf 	bl	8000c58 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209e:	f7fe fddb 	bl	8000c58 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e1e7      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0ef      	beq.n	800209e <HAL_RCC_OscConfig+0x22e>
 80020be:	e020      	b.n	8002102 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fdc2 	bl	8000c58 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d6:	e00d      	b.n	80020f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7fe fdbe 	bl	8000c58 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d906      	bls.n	80020f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1ca      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ea      	bne.n	80020d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a6 	beq.w	800225c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002114:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_OscConfig+0x2b4>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x2b6>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b7f      	ldr	r3, [pc, #508]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	4a7e      	ldr	r2, [pc, #504]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	@ 0x58
 8002136:	4b7c      	ldr	r3, [pc, #496]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002142:	2301      	movs	r3, #1
 8002144:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002146:	4b79      	ldr	r3, [pc, #484]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002152:	4b76      	ldr	r3, [pc, #472]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a75      	ldr	r2, [pc, #468]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7fe fd7b 	bl	8000c58 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7fe fd77 	bl	8000c58 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e183      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002178:	4b6c      	ldr	r3, [pc, #432]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_RCC_OscConfig+0x32e>
 800218c:	4b66      	ldr	r3, [pc, #408]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002192:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800219c:	e024      	b.n	80021e8 <HAL_RCC_OscConfig+0x378>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d110      	bne.n	80021c8 <HAL_RCC_OscConfig+0x358>
 80021a6:	4b60      	ldr	r3, [pc, #384]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c6:	e00f      	b.n	80021e8 <HAL_RCC_OscConfig+0x378>
 80021c8:	4b57      	ldr	r3, [pc, #348]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	4a56      	ldr	r2, [pc, #344]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d8:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe fd32 	bl	8000c58 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe fd2e 	bl	8000c58 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e138      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	4b46      	ldr	r3, [pc, #280]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ed      	beq.n	80021f8 <HAL_RCC_OscConfig+0x388>
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fd1b 	bl	8000c58 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fd17 	bl	8000c58 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e121      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ed      	bne.n	8002226 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b35      	ldr	r3, [pc, #212]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a34      	ldr	r2, [pc, #208]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01c      	beq.n	80022aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002270:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002276:	4a2c      	ldr	r2, [pc, #176]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe fcea 	bl	8000c58 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002288:	f7fe fce6 	bl	8000c58 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0f2      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800229a:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800229c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ef      	beq.n	8002288 <HAL_RCC_OscConfig+0x418>
 80022a8:	e01b      	b.n	80022e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe fccd 	bl	8000c58 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c2:	f7fe fcc9 	bl	8000c58 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0d5      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ef      	bne.n	80022c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80c9 	beq.w	800247e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	f000 8083 	beq.w	8002400 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d15e      	bne.n	80023c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a08      	ldr	r2, [pc, #32]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fca3 	bl	8000c58 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002314:	e00c      	b.n	8002330 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe fc9f 	bl	8000c58 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d905      	bls.n	8002330 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0ab      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	4b55      	ldr	r3, [pc, #340]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1ec      	bne.n	8002316 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b52      	ldr	r3, [pc, #328]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b52      	ldr	r3, [pc, #328]	@ (800248c <HAL_RCC_OscConfig+0x61c>)
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6a11      	ldr	r1, [r2, #32]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800234c:	3a01      	subs	r2, #1
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002356:	0212      	lsls	r2, r2, #8
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800235e:	0852      	lsrs	r2, r2, #1
 8002360:	3a01      	subs	r2, #1
 8002362:	0552      	lsls	r2, r2, #21
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800236a:	0852      	lsrs	r2, r2, #1
 800236c:	3a01      	subs	r2, #1
 800236e:	0652      	lsls	r2, r2, #25
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002376:	06d2      	lsls	r2, r2, #27
 8002378:	430a      	orrs	r2, r1
 800237a:	4943      	ldr	r1, [pc, #268]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b41      	ldr	r3, [pc, #260]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a40      	ldr	r2, [pc, #256]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b3e      	ldr	r3, [pc, #248]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a3d      	ldr	r2, [pc, #244]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fc5e 	bl	8000c58 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fc5a 	bl	8000c58 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e066      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x530>
 80023be:	e05e      	b.n	800247e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a30      	ldr	r2, [pc, #192]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fc44 	bl	8000c58 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fc40 	bl	8000c58 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e04c      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e6:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023f2:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4924      	ldr	r1, [pc, #144]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023f8:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <HAL_RCC_OscConfig+0x620>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]
 80023fe:	e03e      	b.n	800247e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e039      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800240c:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d12c      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	3b01      	subs	r3, #1
 800242c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d123      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d11b      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d113      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d109      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	3b01      	subs	r3, #1
 8002474:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	019f800c 	.word	0x019f800c
 8002490:	feeefffc 	.word	0xfeeefffc

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e11e      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b91      	ldr	r3, [pc, #580]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b8e      	ldr	r3, [pc, #568]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 020f 	bic.w	r2, r3, #15
 80024c2:	498c      	ldr	r1, [pc, #560]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b8a      	ldr	r3, [pc, #552]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e106      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d073      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d129      	bne.n	8002544 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f0:	4b81      	ldr	r3, [pc, #516]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0f4      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002500:	f000 f99e 	bl	8002840 <RCC_GetSysClockFreqFromPLLSource>
 8002504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4a7c      	ldr	r2, [pc, #496]	@ (80026fc <HAL_RCC_ClockConfig+0x268>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d93f      	bls.n	800258e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800250e:	4b7a      	ldr	r3, [pc, #488]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	d033      	beq.n	800258e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d12f      	bne.n	800258e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800252e:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002536:	4a70      	ldr	r2, [pc, #448]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e024      	b.n	800258e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d107      	bne.n	800255c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254c:	4b6a      	ldr	r3, [pc, #424]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0c6      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	4b66      	ldr	r3, [pc, #408]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0be      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800256c:	f000 f8ce 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8002570:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4a61      	ldr	r2, [pc, #388]	@ (80026fc <HAL_RCC_ClockConfig+0x268>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d909      	bls.n	800258e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800257a:	4b5f      	ldr	r3, [pc, #380]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002582:	4a5d      	ldr	r2, [pc, #372]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002588:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b5a      	ldr	r3, [pc, #360]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4957      	ldr	r1, [pc, #348]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a0:	f7fe fb5a 	bl	8000c58 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7fe fb56 	bl	8000c58 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e095      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d023      	beq.n	8002624 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4b43      	ldr	r3, [pc, #268]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a42      	ldr	r2, [pc, #264]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002600:	4b3d      	ldr	r3, [pc, #244]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002608:	4a3b      	ldr	r2, [pc, #236]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800260a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800260e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b39      	ldr	r3, [pc, #228]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4936      	ldr	r1, [pc, #216]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
 8002622:	e008      	b.n	8002636 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b80      	cmp	r3, #128	@ 0x80
 8002628:	d105      	bne.n	8002636 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800262a:	4b33      	ldr	r3, [pc, #204]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4a32      	ldr	r2, [pc, #200]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002630:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002634:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002636:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d21d      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 020f 	bic.w	r2, r3, #15
 800264c:	4929      	ldr	r1, [pc, #164]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002654:	f7fe fb00 	bl	8000c58 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265c:	f7fe fafc 	bl	8000c58 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e03b      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d1ed      	bne.n	800265c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4917      	ldr	r1, [pc, #92]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026aa:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490f      	ldr	r1, [pc, #60]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026be:	f000 f825 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490c      	ldr	r1, [pc, #48]	@ (8002700 <HAL_RCC_ClockConfig+0x26c>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <HAL_RCC_ClockConfig+0x270>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <HAL_RCC_ClockConfig+0x274>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fa6c 	bl	8000bc0 <HAL_InitTick>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40021000 	.word	0x40021000
 80026fc:	04c4b400 	.word	0x04c4b400
 8002700:	0800413c 	.word	0x0800413c
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002712:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d102      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800271e:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e047      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d102      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e03e      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002736:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d136      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002742:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800274c:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d10c      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002760:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276a:	68d2      	ldr	r2, [r2, #12]
 800276c:	0a12      	lsrs	r2, r2, #8
 800276e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
      break;
 8002778:	e00c      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800277a:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	0a12      	lsrs	r2, r2, #8
 8002788:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
      break;
 8002792:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0e5b      	lsrs	r3, r3, #25
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	3301      	adds	r3, #1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	e001      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027b4:	693b      	ldr	r3, [r7, #16]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	007a1200 	.word	0x007a1200

080027d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4904      	ldr	r1, [pc, #16]	@ (8002810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	0800414c 	.word	0x0800414c

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002818:	f7ff ffda 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0adb      	lsrs	r3, r3, #11
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4904      	ldr	r1, [pc, #16]	@ (800283c <HAL_RCC_GetPCLK2Freq+0x28>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	0800414c 	.word	0x0800414c

08002840 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002846:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d10c      	bne.n	800287e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002864:	4a17      	ldr	r2, [pc, #92]	@ (80028c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800286e:	68d2      	ldr	r2, [r2, #12]
 8002870:	0a12      	lsrs	r2, r2, #8
 8002872:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
    break;
 800287c:	e00c      	b.n	8002898 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002888:	68d2      	ldr	r2, [r2, #12]
 800288a:	0a12      	lsrs	r2, r2, #8
 800288c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    break;
 8002896:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0e5b      	lsrs	r3, r3, #25
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40021000 	.word	0x40021000
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	00f42400 	.word	0x00f42400

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d4:	2300      	movs	r3, #0
 80028d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d8:	2300      	movs	r3, #0
 80028da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8098 	beq.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b40      	ldr	r3, [pc, #256]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	4a3f      	ldr	r2, [pc, #252]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	@ 0x58
 8002906:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002916:	4b3a      	ldr	r3, [pc, #232]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a39      	ldr	r2, [pc, #228]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002922:	f7fe f999 	bl	8000c58 <HAL_GetTick>
 8002926:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002928:	e009      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe f995 	bl	8000c58 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d902      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	74fb      	strb	r3, [r7, #19]
        break;
 800293c:	e005      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800293e:	4b30      	ldr	r3, [pc, #192]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ef      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d159      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002950:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01e      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	d019      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002976:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002978:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297e:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002988:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002998:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe f955 	bl	8000c58 <HAL_GetTick>
 80029ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b0:	e00b      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe f951 	bl	8000c58 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d902      	bls.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	74fb      	strb	r3, [r7, #19]
            break;
 80029c8:	e006      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ca:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ec      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ec:	4903      	ldr	r1, [pc, #12]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029f4:	e008      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	74bb      	strb	r3, [r7, #18]
 80029fa:	e005      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a08:	7c7b      	ldrb	r3, [r7, #17]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d105      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4ba7      	ldr	r3, [pc, #668]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	4aa6      	ldr	r2, [pc, #664]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a26:	4ba1      	ldr	r3, [pc, #644]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f023 0203 	bic.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	499d      	ldr	r1, [pc, #628]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a48:	4b98      	ldr	r3, [pc, #608]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f023 020c 	bic.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4995      	ldr	r1, [pc, #596]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a6a:	4b90      	ldr	r3, [pc, #576]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	498c      	ldr	r1, [pc, #560]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a8c:	4b87      	ldr	r3, [pc, #540]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	4984      	ldr	r1, [pc, #528]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aae:	4b7f      	ldr	r3, [pc, #508]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	497b      	ldr	r1, [pc, #492]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad0:	4b76      	ldr	r3, [pc, #472]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4973      	ldr	r1, [pc, #460]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af2:	4b6e      	ldr	r3, [pc, #440]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	496a      	ldr	r1, [pc, #424]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b14:	4b65      	ldr	r3, [pc, #404]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4962      	ldr	r1, [pc, #392]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b36:	4b5d      	ldr	r3, [pc, #372]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	4959      	ldr	r1, [pc, #356]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b58:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	4951      	ldr	r1, [pc, #324]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d015      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	4948      	ldr	r1, [pc, #288]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b98:	d105      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9a:	4b44      	ldr	r3, [pc, #272]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4a43      	ldr	r2, [pc, #268]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ba4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	493a      	ldr	r1, [pc, #232]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd0:	d105      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd2:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4a35      	ldr	r2, [pc, #212]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bdc:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d015      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bea:	4b30      	ldr	r3, [pc, #192]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf8:	492c      	ldr	r1, [pc, #176]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c08:	d105      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c0a:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c14:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d015      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c22:	4b22      	ldr	r3, [pc, #136]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	491e      	ldr	r1, [pc, #120]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c40:	d105      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c42:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4a19      	ldr	r2, [pc, #100]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d015      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c5a:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	4910      	ldr	r1, [pc, #64]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c78:	d105      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c84:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d018      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c98:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	4902      	ldr	r1, [pc, #8]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	e001      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cb8:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	4918      	ldr	r1, [pc, #96]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d08:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d16:	490a      	ldr	r1, [pc, #40]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000

08002d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e049      	b.n	8002dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fe6a 	bl	8000a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 f9b6 	bl	80030f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01b      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f06f 0202 	mvn.w	r2, #2
 8002e26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f93b 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002e42:	e005      	b.n	8002e50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f92d 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f93e 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01b      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0204 	mvn.w	r2, #4
 8002e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f915 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002e8e:	e005      	b.n	8002e9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f907 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f918 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01b      	beq.n	8002eee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f06f 0208 	mvn.w	r2, #8
 8002ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f8ef 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002eda:	e005      	b.n	8002ee8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f8e1 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8f2 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01b      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f06f 0210 	mvn.w	r2, #16
 8002f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2208      	movs	r2, #8
 8002f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f8c9 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002f26:	e005      	b.n	8002f34 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f8bb 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8cc 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0201 	mvn.w	r2, #1
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f899 	bl	8003090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9f6 	bl	8003378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9ee 	bl	800338c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f886 	bl	80030e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0220 	mvn.w	r2, #32
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f9b6 	bl	8003364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00c      	beq.n	800301c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f9c2 	bl	80033a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9ba 	bl	80033b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9b2 	bl	80033c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9aa 	bl	80033dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a48      	ldr	r2, [pc, #288]	@ (8003228 <TIM_Base_SetConfig+0x134>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003112:	d00f      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a45      	ldr	r2, [pc, #276]	@ (800322c <TIM_Base_SetConfig+0x138>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00b      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a44      	ldr	r2, [pc, #272]	@ (8003230 <TIM_Base_SetConfig+0x13c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a43      	ldr	r2, [pc, #268]	@ (8003234 <TIM_Base_SetConfig+0x140>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <TIM_Base_SetConfig+0x144>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a37      	ldr	r2, [pc, #220]	@ (8003228 <TIM_Base_SetConfig+0x134>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003154:	d01b      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a34      	ldr	r2, [pc, #208]	@ (800322c <TIM_Base_SetConfig+0x138>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d017      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a33      	ldr	r2, [pc, #204]	@ (8003230 <TIM_Base_SetConfig+0x13c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a32      	ldr	r2, [pc, #200]	@ (8003234 <TIM_Base_SetConfig+0x140>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00f      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a32      	ldr	r2, [pc, #200]	@ (800323c <TIM_Base_SetConfig+0x148>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <TIM_Base_SetConfig+0x14c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <TIM_Base_SetConfig+0x150>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <TIM_Base_SetConfig+0x144>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <TIM_Base_SetConfig+0x134>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <TIM_Base_SetConfig+0x100>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a19      	ldr	r2, [pc, #100]	@ (8003234 <TIM_Base_SetConfig+0x140>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00f      	beq.n	80031f4 <TIM_Base_SetConfig+0x100>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a19      	ldr	r2, [pc, #100]	@ (800323c <TIM_Base_SetConfig+0x148>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x100>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a18      	ldr	r2, [pc, #96]	@ (8003240 <TIM_Base_SetConfig+0x14c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x100>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <TIM_Base_SetConfig+0x150>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x100>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a12      	ldr	r2, [pc, #72]	@ (8003238 <TIM_Base_SetConfig+0x144>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d103      	bne.n	80031fc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d105      	bne.n	800321a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f023 0201 	bic.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	611a      	str	r2, [r3, #16]
  }
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40013400 	.word	0x40013400
 8003238:	40015000 	.word	0x40015000
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800

08003248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800325c:	2302      	movs	r3, #2
 800325e:	e06f      	b.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a31      	ldr	r2, [pc, #196]	@ (800334c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a30      	ldr	r2, [pc, #192]	@ (8003350 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2e      	ldr	r2, [pc, #184]	@ (8003354 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80032a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01d      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d018      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003358 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00e      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a16      	ldr	r2, [pc, #88]	@ (8003360 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a11      	ldr	r2, [pc, #68]	@ (8003354 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10c      	bne.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800331a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40013400 	.word	0x40013400
 8003354:	40015000 	.word	0x40015000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40014000 	.word	0x40014000

08003364 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e042      	b.n	8003488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd fabd 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2224      	movs	r2, #36	@ 0x24
 800341e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fb24 	bl	8003a88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f825 	bl	8003490 <UART_SetConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e01b      	b.n	8003488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800345e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800346e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fba3 	bl	8003bcc <UART_CheckIdleState>
 8003486:	4603      	mov	r3, r0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b08c      	sub	sp, #48	@ 0x30
 8003496:	af00      	add	r7, sp, #0
 8003498:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4baa      	ldr	r3, [pc, #680]	@ (8003768 <UART_SetConfig+0x2d8>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a9f      	ldr	r2, [pc, #636]	@ (800376c <UART_SetConfig+0x2dc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f8:	4313      	orrs	r3, r2
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003506:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003510:	430b      	orrs	r3, r1
 8003512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f023 010f 	bic.w	r1, r3, #15
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a90      	ldr	r2, [pc, #576]	@ (8003770 <UART_SetConfig+0x2e0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d125      	bne.n	8003580 <UART_SetConfig+0xf0>
 8003534:	4b8f      	ldr	r3, [pc, #572]	@ (8003774 <UART_SetConfig+0x2e4>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b03      	cmp	r3, #3
 8003540:	d81a      	bhi.n	8003578 <UART_SetConfig+0xe8>
 8003542:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <UART_SetConfig+0xb8>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	08003559 	.word	0x08003559
 800354c:	08003569 	.word	0x08003569
 8003550:	08003561 	.word	0x08003561
 8003554:	08003571 	.word	0x08003571
 8003558:	2301      	movs	r3, #1
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800355e:	e116      	b.n	800378e <UART_SetConfig+0x2fe>
 8003560:	2302      	movs	r3, #2
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003566:	e112      	b.n	800378e <UART_SetConfig+0x2fe>
 8003568:	2304      	movs	r3, #4
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800356e:	e10e      	b.n	800378e <UART_SetConfig+0x2fe>
 8003570:	2308      	movs	r3, #8
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003576:	e10a      	b.n	800378e <UART_SetConfig+0x2fe>
 8003578:	2310      	movs	r3, #16
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800357e:	e106      	b.n	800378e <UART_SetConfig+0x2fe>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a7c      	ldr	r2, [pc, #496]	@ (8003778 <UART_SetConfig+0x2e8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d138      	bne.n	80035fc <UART_SetConfig+0x16c>
 800358a:	4b7a      	ldr	r3, [pc, #488]	@ (8003774 <UART_SetConfig+0x2e4>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d82d      	bhi.n	80035f4 <UART_SetConfig+0x164>
 8003598:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <UART_SetConfig+0x110>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035d5 	.word	0x080035d5
 80035a4:	080035f5 	.word	0x080035f5
 80035a8:	080035f5 	.word	0x080035f5
 80035ac:	080035f5 	.word	0x080035f5
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	080035f5 	.word	0x080035f5
 80035b8:	080035f5 	.word	0x080035f5
 80035bc:	080035f5 	.word	0x080035f5
 80035c0:	080035dd 	.word	0x080035dd
 80035c4:	080035f5 	.word	0x080035f5
 80035c8:	080035f5 	.word	0x080035f5
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035ed 	.word	0x080035ed
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035da:	e0d8      	b.n	800378e <UART_SetConfig+0x2fe>
 80035dc:	2302      	movs	r3, #2
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e2:	e0d4      	b.n	800378e <UART_SetConfig+0x2fe>
 80035e4:	2304      	movs	r3, #4
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ea:	e0d0      	b.n	800378e <UART_SetConfig+0x2fe>
 80035ec:	2308      	movs	r3, #8
 80035ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f2:	e0cc      	b.n	800378e <UART_SetConfig+0x2fe>
 80035f4:	2310      	movs	r3, #16
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fa:	e0c8      	b.n	800378e <UART_SetConfig+0x2fe>
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5e      	ldr	r2, [pc, #376]	@ (800377c <UART_SetConfig+0x2ec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d125      	bne.n	8003652 <UART_SetConfig+0x1c2>
 8003606:	4b5b      	ldr	r3, [pc, #364]	@ (8003774 <UART_SetConfig+0x2e4>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003610:	2b30      	cmp	r3, #48	@ 0x30
 8003612:	d016      	beq.n	8003642 <UART_SetConfig+0x1b2>
 8003614:	2b30      	cmp	r3, #48	@ 0x30
 8003616:	d818      	bhi.n	800364a <UART_SetConfig+0x1ba>
 8003618:	2b20      	cmp	r3, #32
 800361a:	d00a      	beq.n	8003632 <UART_SetConfig+0x1a2>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d814      	bhi.n	800364a <UART_SetConfig+0x1ba>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <UART_SetConfig+0x19a>
 8003624:	2b10      	cmp	r3, #16
 8003626:	d008      	beq.n	800363a <UART_SetConfig+0x1aa>
 8003628:	e00f      	b.n	800364a <UART_SetConfig+0x1ba>
 800362a:	2300      	movs	r3, #0
 800362c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003630:	e0ad      	b.n	800378e <UART_SetConfig+0x2fe>
 8003632:	2302      	movs	r3, #2
 8003634:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003638:	e0a9      	b.n	800378e <UART_SetConfig+0x2fe>
 800363a:	2304      	movs	r3, #4
 800363c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003640:	e0a5      	b.n	800378e <UART_SetConfig+0x2fe>
 8003642:	2308      	movs	r3, #8
 8003644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003648:	e0a1      	b.n	800378e <UART_SetConfig+0x2fe>
 800364a:	2310      	movs	r3, #16
 800364c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003650:	e09d      	b.n	800378e <UART_SetConfig+0x2fe>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a4a      	ldr	r2, [pc, #296]	@ (8003780 <UART_SetConfig+0x2f0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d125      	bne.n	80036a8 <UART_SetConfig+0x218>
 800365c:	4b45      	ldr	r3, [pc, #276]	@ (8003774 <UART_SetConfig+0x2e4>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003662:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003666:	2bc0      	cmp	r3, #192	@ 0xc0
 8003668:	d016      	beq.n	8003698 <UART_SetConfig+0x208>
 800366a:	2bc0      	cmp	r3, #192	@ 0xc0
 800366c:	d818      	bhi.n	80036a0 <UART_SetConfig+0x210>
 800366e:	2b80      	cmp	r3, #128	@ 0x80
 8003670:	d00a      	beq.n	8003688 <UART_SetConfig+0x1f8>
 8003672:	2b80      	cmp	r3, #128	@ 0x80
 8003674:	d814      	bhi.n	80036a0 <UART_SetConfig+0x210>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <UART_SetConfig+0x1f0>
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d008      	beq.n	8003690 <UART_SetConfig+0x200>
 800367e:	e00f      	b.n	80036a0 <UART_SetConfig+0x210>
 8003680:	2300      	movs	r3, #0
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003686:	e082      	b.n	800378e <UART_SetConfig+0x2fe>
 8003688:	2302      	movs	r3, #2
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800368e:	e07e      	b.n	800378e <UART_SetConfig+0x2fe>
 8003690:	2304      	movs	r3, #4
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e07a      	b.n	800378e <UART_SetConfig+0x2fe>
 8003698:	2308      	movs	r3, #8
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e076      	b.n	800378e <UART_SetConfig+0x2fe>
 80036a0:	2310      	movs	r3, #16
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e072      	b.n	800378e <UART_SetConfig+0x2fe>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a35      	ldr	r2, [pc, #212]	@ (8003784 <UART_SetConfig+0x2f4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d12a      	bne.n	8003708 <UART_SetConfig+0x278>
 80036b2:	4b30      	ldr	r3, [pc, #192]	@ (8003774 <UART_SetConfig+0x2e4>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c0:	d01a      	beq.n	80036f8 <UART_SetConfig+0x268>
 80036c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c6:	d81b      	bhi.n	8003700 <UART_SetConfig+0x270>
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036cc:	d00c      	beq.n	80036e8 <UART_SetConfig+0x258>
 80036ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036d2:	d815      	bhi.n	8003700 <UART_SetConfig+0x270>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <UART_SetConfig+0x250>
 80036d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036dc:	d008      	beq.n	80036f0 <UART_SetConfig+0x260>
 80036de:	e00f      	b.n	8003700 <UART_SetConfig+0x270>
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036e6:	e052      	b.n	800378e <UART_SetConfig+0x2fe>
 80036e8:	2302      	movs	r3, #2
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ee:	e04e      	b.n	800378e <UART_SetConfig+0x2fe>
 80036f0:	2304      	movs	r3, #4
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e04a      	b.n	800378e <UART_SetConfig+0x2fe>
 80036f8:	2308      	movs	r3, #8
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fe:	e046      	b.n	800378e <UART_SetConfig+0x2fe>
 8003700:	2310      	movs	r3, #16
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e042      	b.n	800378e <UART_SetConfig+0x2fe>
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a17      	ldr	r2, [pc, #92]	@ (800376c <UART_SetConfig+0x2dc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d13a      	bne.n	8003788 <UART_SetConfig+0x2f8>
 8003712:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <UART_SetConfig+0x2e4>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800371c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003720:	d01a      	beq.n	8003758 <UART_SetConfig+0x2c8>
 8003722:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003726:	d81b      	bhi.n	8003760 <UART_SetConfig+0x2d0>
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800372c:	d00c      	beq.n	8003748 <UART_SetConfig+0x2b8>
 800372e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003732:	d815      	bhi.n	8003760 <UART_SetConfig+0x2d0>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <UART_SetConfig+0x2b0>
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373c:	d008      	beq.n	8003750 <UART_SetConfig+0x2c0>
 800373e:	e00f      	b.n	8003760 <UART_SetConfig+0x2d0>
 8003740:	2300      	movs	r3, #0
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003746:	e022      	b.n	800378e <UART_SetConfig+0x2fe>
 8003748:	2302      	movs	r3, #2
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374e:	e01e      	b.n	800378e <UART_SetConfig+0x2fe>
 8003750:	2304      	movs	r3, #4
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003756:	e01a      	b.n	800378e <UART_SetConfig+0x2fe>
 8003758:	2308      	movs	r3, #8
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375e:	e016      	b.n	800378e <UART_SetConfig+0x2fe>
 8003760:	2310      	movs	r3, #16
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003766:	e012      	b.n	800378e <UART_SetConfig+0x2fe>
 8003768:	cfff69f3 	.word	0xcfff69f3
 800376c:	40008000 	.word	0x40008000
 8003770:	40013800 	.word	0x40013800
 8003774:	40021000 	.word	0x40021000
 8003778:	40004400 	.word	0x40004400
 800377c:	40004800 	.word	0x40004800
 8003780:	40004c00 	.word	0x40004c00
 8003784:	40005000 	.word	0x40005000
 8003788:	2310      	movs	r3, #16
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4aae      	ldr	r2, [pc, #696]	@ (8003a4c <UART_SetConfig+0x5bc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	f040 8097 	bne.w	80038c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800379a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d823      	bhi.n	80037ea <UART_SetConfig+0x35a>
 80037a2:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <UART_SetConfig+0x318>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037eb 	.word	0x080037eb
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037db 	.word	0x080037db
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	080037eb 	.word	0x080037eb
 80037c4:	080037eb 	.word	0x080037eb
 80037c8:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7ff f80c 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037d2:	e010      	b.n	80037f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b9e      	ldr	r3, [pc, #632]	@ (8003a50 <UART_SetConfig+0x5c0>)
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037d8:	e00d      	b.n	80037f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe ff97 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80037de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037e0:	e009      	b.n	80037f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037e8:	e005      	b.n	80037f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8130 	beq.w	8003a5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	4a94      	ldr	r2, [pc, #592]	@ (8003a54 <UART_SetConfig+0x5c4>)
 8003804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003808:	461a      	mov	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003810:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	429a      	cmp	r2, r3
 8003820:	d305      	bcc.n	800382e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	429a      	cmp	r2, r3
 800382c:	d903      	bls.n	8003836 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003834:	e113      	b.n	8003a5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	2200      	movs	r2, #0
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	60fa      	str	r2, [r7, #12]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	4a84      	ldr	r2, [pc, #528]	@ (8003a54 <UART_SetConfig+0x5c4>)
 8003844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003848:	b29b      	uxth	r3, r3
 800384a:	2200      	movs	r2, #0
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003858:	f7fc fcde 	bl	8000218 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	020b      	lsls	r3, r1, #8
 800386e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003872:	0202      	lsls	r2, r0, #8
 8003874:	6979      	ldr	r1, [r7, #20]
 8003876:	6849      	ldr	r1, [r1, #4]
 8003878:	0849      	lsrs	r1, r1, #1
 800387a:	2000      	movs	r0, #0
 800387c:	460c      	mov	r4, r1
 800387e:	4605      	mov	r5, r0
 8003880:	eb12 0804 	adds.w	r8, r2, r4
 8003884:	eb43 0905 	adc.w	r9, r3, r5
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	469a      	mov	sl, r3
 8003890:	4693      	mov	fp, r2
 8003892:	4652      	mov	r2, sl
 8003894:	465b      	mov	r3, fp
 8003896:	4640      	mov	r0, r8
 8003898:	4649      	mov	r1, r9
 800389a:	f7fc fcbd 	bl	8000218 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4613      	mov	r3, r2
 80038a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ac:	d308      	bcc.n	80038c0 <UART_SetConfig+0x430>
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b4:	d204      	bcs.n	80038c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e0ce      	b.n	8003a5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038c6:	e0ca      	b.n	8003a5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d0:	d166      	bne.n	80039a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d827      	bhi.n	800392a <UART_SetConfig+0x49a>
 80038da:	a201      	add	r2, pc, #4	@ (adr r2, 80038e0 <UART_SetConfig+0x450>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	0800390d 	.word	0x0800390d
 80038e8:	08003915 	.word	0x08003915
 80038ec:	0800392b 	.word	0x0800392b
 80038f0:	0800391b 	.word	0x0800391b
 80038f4:	0800392b 	.word	0x0800392b
 80038f8:	0800392b 	.word	0x0800392b
 80038fc:	0800392b 	.word	0x0800392b
 8003900:	08003923 	.word	0x08003923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe ff70 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8003908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800390a:	e014      	b.n	8003936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7fe ff82 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8003910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003912:	e010      	b.n	8003936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003914:	4b4e      	ldr	r3, [pc, #312]	@ (8003a50 <UART_SetConfig+0x5c0>)
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003918:	e00d      	b.n	8003936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391a:	f7fe fef7 	bl	800270c <HAL_RCC_GetSysClockFreq>
 800391e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003920:	e009      	b.n	8003936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003928:	e005      	b.n	8003936 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8090 	beq.w	8003a5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	4a44      	ldr	r2, [pc, #272]	@ (8003a54 <UART_SetConfig+0x5c4>)
 8003944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003948:	461a      	mov	r2, r3
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003950:	005a      	lsls	r2, r3, #1
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	441a      	add	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2b0f      	cmp	r3, #15
 8003968:	d916      	bls.n	8003998 <UART_SetConfig+0x508>
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003970:	d212      	bcs.n	8003998 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f023 030f 	bic.w	r3, r3, #15
 800397a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	b29b      	uxth	r3, r3
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	b29a      	uxth	r2, r3
 8003988:	8bfb      	ldrh	r3, [r7, #30]
 800398a:	4313      	orrs	r3, r2
 800398c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	8bfa      	ldrh	r2, [r7, #30]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	e062      	b.n	8003a5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800399e:	e05e      	b.n	8003a5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d828      	bhi.n	80039fa <UART_SetConfig+0x56a>
 80039a8:	a201      	add	r2, pc, #4	@ (adr r2, 80039b0 <UART_SetConfig+0x520>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039eb 	.word	0x080039eb
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7fe ff08 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 80039d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039da:	e014      	b.n	8003a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe ff1a 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 80039e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e2:	e010      	b.n	8003a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a50 <UART_SetConfig+0x5c0>)
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039e8:	e00d      	b.n	8003a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe fe8f 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80039ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039f0:	e009      	b.n	8003a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039f8:	e005      	b.n	8003a06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a04:	bf00      	nop
    }

    if (pclk != 0U)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d028      	beq.n	8003a5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	4a10      	ldr	r2, [pc, #64]	@ (8003a54 <UART_SetConfig+0x5c4>)
 8003a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	441a      	add	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	d910      	bls.n	8003a58 <UART_SetConfig+0x5c8>
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3c:	d20c      	bcs.n	8003a58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	e009      	b.n	8003a5e <UART_SetConfig+0x5ce>
 8003a4a:	bf00      	nop
 8003a4c:	40008000 	.word	0x40008000
 8003a50:	00f42400 	.word	0x00f42400
 8003a54:	08004164 	.word	0x08004164
      }
      else
      {
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a7a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3730      	adds	r7, #48	@ 0x30
 8003a82:	46bd      	mov	sp, r7
 8003a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01a      	beq.n	8003b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b86:	d10a      	bne.n	8003b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b098      	sub	sp, #96	@ 0x60
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bdc:	f7fd f83c 	bl	8000c58 <HAL_GetTick>
 8003be0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d12f      	bne.n	8003c50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f88e 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d022      	beq.n	8003c50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c2a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e6      	bne.n	8003c0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e063      	b.n	8003d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d149      	bne.n	8003cf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c66:	2200      	movs	r2, #0
 8003c68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f857 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d03c      	beq.n	8003cf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	623b      	str	r3, [r7, #32]
   return(result);
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e6      	bne.n	8003c78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cca:	61fa      	str	r2, [r7, #28]
 8003ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	69b9      	ldr	r1, [r7, #24]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e5      	bne.n	8003caa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e012      	b.n	8003d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3758      	adds	r7, #88	@ 0x58
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d30:	e04f      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d04b      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fc ff8d 	bl	8000c58 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e04e      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d037      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b80      	cmp	r3, #128	@ 0x80
 8003d66:	d034      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d031      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d110      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2208      	movs	r2, #8
 8003d82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f838 	bl	8003dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e029      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dac:	d111      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f81e 	bl	8003dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e00f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0a0      	beq.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b095      	sub	sp, #84	@ 0x54
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e6      	bne.n	8003e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e3      	bne.n	8003e34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d118      	bne.n	8003ea6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 0310 	bic.w	r3, r3, #16
 8003e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e6      	bne.n	8003e74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003eba:	bf00      	nop
 8003ebc:	3754      	adds	r7, #84	@ 0x54
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_UARTEx_DisableFifoMode+0x16>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e027      	b.n	8003f2c <HAL_UARTEx_DisableFifoMode+0x66>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	@ 0x24
 8003ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003f0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e02d      	b.n	8003fac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f84f 	bl	8004030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e02d      	b.n	8004028 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	@ 0x24
 8003fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f811 	bl	8004030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800403c:	2b00      	cmp	r3, #0
 800403e:	d108      	bne.n	8004052 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004050:	e031      	b.n	80040b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004052:	2308      	movs	r3, #8
 8004054:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004056:	2308      	movs	r3, #8
 8004058:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	0e5b      	lsrs	r3, r3, #25
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	0f5b      	lsrs	r3, r3, #29
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800407a:	7bbb      	ldrb	r3, [r7, #14]
 800407c:	7b3a      	ldrb	r2, [r7, #12]
 800407e:	4911      	ldr	r1, [pc, #68]	@ (80040c4 <UARTEx_SetNbDataToProcess+0x94>)
 8004080:	5c8a      	ldrb	r2, [r1, r2]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004086:	7b3a      	ldrb	r2, [r7, #12]
 8004088:	490f      	ldr	r1, [pc, #60]	@ (80040c8 <UARTEx_SetNbDataToProcess+0x98>)
 800408a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800408c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	7b7a      	ldrb	r2, [r7, #13]
 800409c:	4909      	ldr	r1, [pc, #36]	@ (80040c4 <UARTEx_SetNbDataToProcess+0x94>)
 800409e:	5c8a      	ldrb	r2, [r1, r2]
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80040a4:	7b7a      	ldrb	r2, [r7, #13]
 80040a6:	4908      	ldr	r1, [pc, #32]	@ (80040c8 <UARTEx_SetNbDataToProcess+0x98>)
 80040a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	0800417c 	.word	0x0800417c
 80040c8:	08004184 	.word	0x08004184

080040cc <memset>:
 80040cc:	4402      	add	r2, r0
 80040ce:	4603      	mov	r3, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <__libc_init_array>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4d0d      	ldr	r5, [pc, #52]	@ (8004114 <__libc_init_array+0x38>)
 80040e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004118 <__libc_init_array+0x3c>)
 80040e2:	1b64      	subs	r4, r4, r5
 80040e4:	10a4      	asrs	r4, r4, #2
 80040e6:	2600      	movs	r6, #0
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d109      	bne.n	8004100 <__libc_init_array+0x24>
 80040ec:	4d0b      	ldr	r5, [pc, #44]	@ (800411c <__libc_init_array+0x40>)
 80040ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004120 <__libc_init_array+0x44>)
 80040f0:	f000 f818 	bl	8004124 <_init>
 80040f4:	1b64      	subs	r4, r4, r5
 80040f6:	10a4      	asrs	r4, r4, #2
 80040f8:	2600      	movs	r6, #0
 80040fa:	42a6      	cmp	r6, r4
 80040fc:	d105      	bne.n	800410a <__libc_init_array+0x2e>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	f855 3b04 	ldr.w	r3, [r5], #4
 8004104:	4798      	blx	r3
 8004106:	3601      	adds	r6, #1
 8004108:	e7ee      	b.n	80040e8 <__libc_init_array+0xc>
 800410a:	f855 3b04 	ldr.w	r3, [r5], #4
 800410e:	4798      	blx	r3
 8004110:	3601      	adds	r6, #1
 8004112:	e7f2      	b.n	80040fa <__libc_init_array+0x1e>
 8004114:	08004194 	.word	0x08004194
 8004118:	08004194 	.word	0x08004194
 800411c:	08004194 	.word	0x08004194
 8004120:	08004198 	.word	0x08004198

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
